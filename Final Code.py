# -*- coding: utf-8 -*-
"""DS440 Final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dos82sXpxAaKKR6QiohRmtoWAxbEnbkB

# Importing libraries
### Done by Gabriel, Colby, Heejun
"""

# Commented out IPython magic to ensure Python compatibility.
# import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sqlite3
import gc
# import preprocessing classes
from sklearn.preprocessing import OrdinalEncoder, LabelEncoder

# feature selection
from sklearn.feature_selection import chi2, mutual_info_regression
from sklearn.feature_selection import SelectKBest, chi2

# import models
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR

# import train test split
from sklearn.model_selection import train_test_split

# feature importance
from sklearn.inspection import permutation_importance

# import metrics
from sklearn.metrics import mean_absolute_error, mean_squared_error

# functions to save data
from joblib import dump, load

# read data
## mount google drive
from google.colab import drive
drive.mount("/content/drive/")
# %cd '/content/drive/MyDrive/DS440/dataset/Data/'
!pwd

## read in files
dir = '/content/drive/MyDrive/DS440/dataset/Data/'
cnx = sqlite3.connect(dir + 'wildfire.sqlite')
cursor = cnx.cursor()
cursor.execute("SELECT name FROM sqlite_master WHERE type='Fires';")
tables = cursor.fetchall()
Fires = pd.read_sql_query("SELECT * FROM 'Fires'", cnx).set_index('FOD_ID')
gc.collect()
# Drop unnecessary column
Fires.drop(columns=['FPA_ID','SOURCE_SYSTEM_TYPE','SOURCE_SYSTEM','NWCG_REPORTING_AGENCY','NWCG_REPORTING_UNIT_ID',
                    'NWCG_REPORTING_UNIT_NAME','SOURCE_REPORTING_UNIT','SOURCE_REPORTING_UNIT_NAME','LOCAL_FIRE_REPORT_ID',
                    'LOCAL_INCIDENT_ID','FIRE_CODE','FIRE_NAME','ICS_209_PLUS_INCIDENT_JOIN_ID','ICS_209_PLUS_COMPLEX_JOIN_ID',
                    'MTBS_ID','MTBS_FIRE_NAME','COMPLEX_NAME','OWNER_DESCR','NWCG_CAUSE_CLASSIFICATION',
                    'NWCG_CAUSE_AGE_CATEGORY','CONT_TIME','CONT_DATE'],inplace=True)

Fires.head()

"""# Data Preprocessing
## convert all features into usable format
## Use random sample from originial dataset due to high computational cost
## Take 1% from each FIRE_SIZE_CLASS to ensure that fire size distribution is uniform after random sampling
## Purpose : 
1. To handle big data
2. To debug and to see that the code actually works
"""

Fires_A = Fires[Fires['FIRE_SIZE_CLASS'] == 'A'].sample(frac=0.05,replace=False)
Fires_B = Fires[Fires['FIRE_SIZE_CLASS'] == 'B'].sample(frac=0.05,replace=False)
Fires_C = Fires[Fires['FIRE_SIZE_CLASS'] == 'C'].sample(frac=0.05,replace=False)
Fires_D = Fires[Fires['FIRE_SIZE_CLASS'] == 'D'].sample(frac=0.05,replace=False)
Fires_E = Fires[Fires['FIRE_SIZE_CLASS'] == 'E'].sample(frac=0.05,replace=False)
Fires_F = Fires[Fires['FIRE_SIZE_CLASS'] == 'F'].sample(frac=0.05,replace=False)
Fires_G = Fires[Fires['FIRE_SIZE_CLASS'] == 'G'].sample(frac=0.05,replace=False)
Fires_AB = pd.concat([Fires_A, Fires_B], ignore_index=True)
Fires_CD = pd.concat([Fires_C, Fires_D], ignore_index=True)
Fires_EF = pd.concat([Fires_E, Fires_F], ignore_index=True)
Fires_EFG = pd.concat([Fires_EF, Fires_G], ignore_index=True)
Fires_ABCD = pd.concat([Fires_AB, Fires_CD], ignore_index=True)
Fires = pd.concat([Fires_ABCD, Fires_EFG], ignore_index=True)
Fires

"""# Gabriel's Coding"""

# extract month from discovery date
def get_first_element(date_list):
  return date_list[0]

Fires['DISCOVERY_DATE'] = Fires['DISCOVERY_DATE'].astype("string")
Fires['DISCOVERY_LIST'] = Fires['DISCOVERY_DATE'].str.split(pat='/')
Fires['DISCOVERY_MONTH'] = Fires['DISCOVERY_LIST'].map(get_first_element)
Fires['DISCOVERY_MONTH'] = Fires['DISCOVERY_MONTH'].astype("int64")

# encode causes into integers
Fires['NWCG_GENERAL_CAUSE'] = Fires['NWCG_GENERAL_CAUSE'].astype("string")
cause_enc = LabelEncoder()
Fires['NWCG_CAUSE_CLASSIFICATION_ORD'] = cause_enc.fit_transform(Fires['NWCG_GENERAL_CAUSE'])


# figure out number of days to contain the fire
Fires['DAYS_TO_CONT'] = Fires['CONT_DOY'] - Fires['DISCOVERY_DOY']
##### if it was contained the next year, need to do something about that
def convert_negative_days(day):
  if day < 0:
    return 365 + day
  else:
    return day

Fires['DAYS_TO_CONT'] = Fires['DAYS_TO_CONT'].map(convert_negative_days)


# encode state categories into integers
Fires['STATE'] = Fires['STATE'].astype("string")
state_enc = LabelEncoder()
Fires['STATE_ORD'] = state_enc.fit_transform(Fires['STATE'])

# what to do about counties? Use fips code (must be an int)
Fires['FIPS_CODE'] = Fires['FIPS_CODE'].astype("string")
Fires['FIPS_CODE'].fillna('1000000',inplace=True)
Fires['FIPS_CODE'] = Fires['FIPS_CODE'].astype("int64")

# fill NA with mean of day to containment (mean = 0.92)
Fires['DAYS_TO_CONT'].fillna(value=Fires['DAYS_TO_CONT'].mean(),inplace=True)


# drop date and list
Fires.drop(columns=['DISCOVERY_DATE','DISCOVERY_LIST','NWCG_GENERAL_CAUSE',
                    'CONT_DOY','STATE',
                    'COUNTY'],inplace=True)
gc.collect()

Fires.head()

Fires.isna().sum()

"""#** Code by Heejun Son**
### Need to handle missing values in DISCOVERY_TIME column

"""

Fires['FIPS_NAME'].fillna('1000000',inplace=True)

Fires = Fires[Fires['FIPS_NAME'] != '1000000']
Fires.drop(columns=['FIPS_CODE','DAYS_TO_CONT'],inplace=True)
# encode state categories into integers
FIPS_enc = LabelEncoder()
Fires['FIPS_NAME'] = FIPS_enc.fit_transform(Fires['FIPS_NAME'])

#Replace NaN with values predicted by KNN
from sklearn.impute import KNNImputer
Fires_KNN = Fires.sample(frac=1,random_state=0)
Input = Fires_KNN[['FIRE_YEAR','DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
imputer = KNNImputer(n_neighbors=10)

result = imputer.fit_transform(Input)
check = pd.DataFrame(result)
New_Discovery_Time = check[[1]].values.tolist()

Fires_KNN['Assumption'] = New_Discovery_Time
# Convert object to float64
Fires_KNN['Assumption'] = Fires_KNN['Assumption'].astype("string")
Fires_KNN['Assumption'] = Fires_KNN['Assumption'].str.strip('[]')
Fires_KNN['Assumption'] = Fires_KNN['Assumption'].astype("float64")
# Drop DISCOVERY_TIME column that contains NaN
Fires_KNN.drop(columns=['DISCOVERY_TIME'],inplace=True)
# Change column name from Assumption to DISCOVERY_TIME
Fires_KNN['DISCOVERY_TIME'] = Fires_KNN['Assumption']
Fires_KNN.drop(columns=['Assumption'],inplace=True)
Fires_KNN

Fires_KNN.isna().sum()

"""# ** Code by Heejun **
## Feature selection information
Later need to convert LONGITUDE to negative values!!

Reason for using abs() : There are no positive values !!
                        
(United States only have negative lonitude values)
"""

# Convert negative value to positive
# Feature Selection must have non-negative values
Fires_KNN['LONGITUDE'] = Fires_KNN['LONGITUDE'].abs()

from sklearn.feature_selection import SelectKBest, chi2
from sklearn import preprocessing

X_KNN = Fires_KNN[['FIRE_YEAR','DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
y_KNN = Fires_KNN['FIRE_SIZE']
# Transform FIRE_SIZE
# SelectKBest() cannot handle countinous numbers
Encoder_KNN = preprocessing.LabelEncoder()
Firs_size_encoded_KNN = Encoder_KNN.fit_transform(y_KNN)

Best_Features_KNN = dict()
for i in range(1,10):
  selector_KNN = SelectKBest(chi2, k=i)
  selector_KNN.fit(X_KNN, Firs_size_encoded_KNN)
  Features_KNN = list(X_KNN.columns[selector_KNN.get_support(indices=True)])
  Best_Features_KNN[i] = (Features_KNN, selector_KNN.scores_, selector_KNN.pvalues_, selector_KNN.feature_names_in_)
  print("(KNN) When k= ", i, ",", Features_KNN)

value = Best_Features_KNN[9][1]
name = Best_Features_KNN[9][3]
data = {'Feature':name, 'Score':value}
chi = pd.DataFrame(data=data).reset_index()
chi = chi.sort_values(by='Score', ascending= True)
chi

plt.barh(chi['Feature'],chi['Score'])
plt.xlabel("Chi Square Score")
plt.title("Chi Square Bar Graph")
plt.show()

"""# With missing values(NaN), models cannot be trained!

Below code will show the error!
"""

#### split data into training, validation, and testing
X = Fires[['FIRE_YEAR','DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
y = Fires['FIRE_SIZE']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
#### List of models
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor, SVR] #GaussianNB, 
################################################################################################################################               
model_scores = dict()
for model in model_list:
  # fit model to data
  print(model)
  regressor = model().fit(X_train,y_train)
  y_pred = regressor.predict(X_test)
  model_mse = mean_squared_error(y_pred,y_test)
  model_mae = mean_absolute_error(y_pred,y_test)
  model_scores[model] = (regressor,y_pred,model_mse,model_mae)
  print("MSE = ", model_mse, '\n', "MAE = ", model_mae)

"""# MODEL"""

Fires_KNN['FIRE_SIZE'].hist()

Fires_KNN[Fires_KNN['FIRE_SIZE'] >= 15]['FIRE_SIZE'].hist()

Fires_KNN[Fires_KNN['FIRE_SIZE'] >= 1000]['FIRE_SIZE'].hist()

Fires_KNN[Fires_KNN['FIRE_SIZE'].between(0,100)]['FIRE_SIZE'].hist()

Fires_KNN[Fires_KNN['FIRE_SIZE'].between(0,1)]['FIRE_SIZE'].hist()

Fires_KNN[Fires_KNN['FIRE_SIZE'].between(1.01,10)]['FIRE_SIZE'].hist()

Fires_KNN[Fires_KNN['FIRE_SIZE'].between(5.01,15)]['FIRE_SIZE'].hist()

Fires_KNN[Fires_KNN['FIRE_SIZE'].between(1000,10000)]['FIRE_SIZE'].hist()

Fires_KNN[Fires_KNN['FIRE_SIZE'].between(10000,30000)]['FIRE_SIZE'].hist()

Fires_KNN[Fires_KNN['FIRE_SIZE'].between(10000,333330000)]['FIRE_SIZE'].hist()

Fires['FIRE_SIZE'].hist()

"""# Trial 1
  - Use all data to predict fire size

## Create the baseline
 - Use all the data to predict fire size in year 2018
"""

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
X_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
y_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_KNN = dict()    
model_KNN_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_KNN = model().fit(X_KNN_train,X_KNN_test)
  y_KNN_pred = regressor_KNN.predict(y_KNN_train)
  model_KNN_mse = mean_squared_error(y_KNN_pred,y_KNN_test)
  model_KNN_mae = mean_absolute_error(y_KNN_pred,y_KNN_test)
  model_scores_KNN[model] = (regressor_KNN,y_KNN_test,y_KNN_pred)
  model_KNN_df = model_KNN_df.append({'Model':model,'MSE':model_KNN_mse,'MAE':model_KNN_mae}, ignore_index=True)
  model_KNN_df = model_KNN_df.sort_values(by='MSE', ascending= True)
model_KNN_df

"""- Using Rank 1 feature: FIPS_NAME"""

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018][['FIPS_NAME']]
X_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018][['FIPS_NAME']]
y_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_KNN = dict()    
model_KNN_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_KNN = model().fit(X_KNN_train,X_KNN_test)
  y_KNN_pred = regressor_KNN.predict(y_KNN_train)
  model_KNN_mse = mean_squared_error(y_KNN_pred,y_KNN_test)
  model_KNN_mae = mean_absolute_error(y_KNN_pred,y_KNN_test)
  model_scores_KNN[model] = (regressor_KNN,y_KNN_test,y_KNN_pred)
  model_KNN_df = model_KNN_df.append({'Model':model,'MSE':model_KNN_mse,'MAE':model_KNN_mae}, ignore_index=True)
  model_KNN_df = model_KNN_df.sort_values(by='MSE', ascending= True)
model_KNN_df

"""- Using Rank 1~2 features"""

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018][['DISCOVERY_TIME','FIPS_NAME']]
X_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018][['DISCOVERY_TIME','FIPS_NAME']]
y_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_KNN = dict()    
model_KNN_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_KNN = model().fit(X_KNN_train,X_KNN_test)
  y_KNN_pred = regressor_KNN.predict(y_KNN_train)
  model_KNN_mse = mean_squared_error(y_KNN_pred,y_KNN_test)
  model_KNN_mae = mean_absolute_error(y_KNN_pred,y_KNN_test)
  model_scores_KNN[model] = (regressor_KNN,y_KNN_test,y_KNN_pred)
  model_KNN_df = model_KNN_df.append({'Model':model,'MSE':model_KNN_mse,'MAE':model_KNN_mae}, ignore_index=True)
  model_KNN_df = model_KNN_df.sort_values(by='MSE', ascending= True)
model_KNN_df

"""- Using Rank 1~3 features"""

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY']]
X_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY']]
y_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_KNN = dict()    
model_KNN_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_KNN = model().fit(X_KNN_train,X_KNN_test)
  y_KNN_pred = regressor_KNN.predict(y_KNN_train)
  model_KNN_mse = mean_squared_error(y_KNN_pred,y_KNN_test)
  model_KNN_mae = mean_absolute_error(y_KNN_pred,y_KNN_test)
  model_scores_KNN[model] = (regressor_KNN,y_KNN_test,y_KNN_pred)
  model_KNN_df = model_KNN_df.append({'Model':model,'MSE':model_KNN_mse,'MAE':model_KNN_mae}, ignore_index=True)
  model_KNN_df = model_KNN_df.sort_values(by='MSE', ascending= True)
model_KNN_df

"""- Using Rank 1~4 features"""

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY','STATE_ORD']]
X_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY','STATE_ORD']]
y_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_KNN = dict()    
model_KNN_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_KNN = model().fit(X_KNN_train,X_KNN_test)
  y_KNN_pred = regressor_KNN.predict(y_KNN_train)
  model_KNN_mse = mean_squared_error(y_KNN_pred,y_KNN_test)
  model_KNN_mae = mean_absolute_error(y_KNN_pred,y_KNN_test)
  model_scores_KNN[model] = (regressor_KNN,y_KNN_test,y_KNN_pred)
  model_KNN_df = model_KNN_df.append({'Model':model,'MSE':model_KNN_mse,'MAE':model_KNN_mae}, ignore_index=True)
  model_KNN_df = model_KNN_df.sort_values(by='MSE', ascending= True)
model_KNN_df

"""- Using Rank 1~5 features"""

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY','STATE_ORD','LONGITUDE']]
X_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY','STATE_ORD','LONGITUDE']]
y_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_KNN = dict()    
model_KNN_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_KNN = model().fit(X_KNN_train,X_KNN_test)
  y_KNN_pred = regressor_KNN.predict(y_KNN_train)
  model_KNN_mse = mean_squared_error(y_KNN_pred,y_KNN_test)
  model_KNN_mae = mean_absolute_error(y_KNN_pred,y_KNN_test)
  model_scores_KNN[model] = (regressor_KNN,y_KNN_test,y_KNN_pred)
  model_KNN_df = model_KNN_df.append({'Model':model,'MSE':model_KNN_mse,'MAE':model_KNN_mae}, ignore_index=True)
  model_KNN_df = model_KNN_df.sort_values(by='MSE', ascending= True)
model_KNN_df

"""- Using Rank 1~6 features"""

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY','STATE_ORD','LONGITUDE','NWCG_CAUSE_CLASSIFICATION_ORD']]
X_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY','STATE_ORD','LONGITUDE','NWCG_CAUSE_CLASSIFICATION_ORD']]
y_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_KNN = dict()    
model_KNN_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_KNN = model().fit(X_KNN_train,X_KNN_test)
  y_KNN_pred = regressor_KNN.predict(y_KNN_train)
  model_KNN_mse = mean_squared_error(y_KNN_pred,y_KNN_test)
  model_KNN_mae = mean_absolute_error(y_KNN_pred,y_KNN_test)
  model_scores_KNN[model] = (regressor_KNN,y_KNN_test,y_KNN_pred)
  model_KNN_df = model_KNN_df.append({'Model':model,'MSE':model_KNN_mse,'MAE':model_KNN_mae}, ignore_index=True)
  model_KNN_df = model_KNN_df.sort_values(by='MSE', ascending= True)
model_KNN_df

"""- Using Rank 1~7 features"""

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY','STATE_ORD','LONGITUDE','NWCG_CAUSE_CLASSIFICATION_ORD','LATITUDE']]
X_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY','STATE_ORD','LONGITUDE','NWCG_CAUSE_CLASSIFICATION_ORD','LATITUDE']]
y_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_KNN = dict()    
model_KNN_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_KNN = model().fit(X_KNN_train,X_KNN_test)
  y_KNN_pred = regressor_KNN.predict(y_KNN_train)
  model_KNN_mse = mean_squared_error(y_KNN_pred,y_KNN_test)
  model_KNN_mae = mean_absolute_error(y_KNN_pred,y_KNN_test)
  model_scores_KNN[model] = (regressor_KNN,y_KNN_test,y_KNN_pred)
  model_KNN_df = model_KNN_df.append({'Model':model,'MSE':model_KNN_mse,'MAE':model_KNN_mae}, ignore_index=True)
  model_KNN_df = model_KNN_df.sort_values(by='MSE', ascending= True)
model_KNN_df

"""- Using Rank 1~8 features"""

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY','STATE_ORD','LONGITUDE','NWCG_CAUSE_CLASSIFICATION_ORD','LATITUDE','DISCOVERY_MONTH']]
X_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018][['DISCOVERY_TIME','FIPS_NAME','DISCOVERY_DOY','STATE_ORD','LONGITUDE','NWCG_CAUSE_CLASSIFICATION_ORD','LATITUDE','DISCOVERY_MONTH']]
y_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_KNN = dict()    
model_KNN_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_KNN = model().fit(X_KNN_train,X_KNN_test)
  y_KNN_pred = regressor_KNN.predict(y_KNN_train)
  model_KNN_mse = mean_squared_error(y_KNN_pred,y_KNN_test)
  model_KNN_mae = mean_absolute_error(y_KNN_pred,y_KNN_test)
  model_scores_KNN[model] = (regressor_KNN,y_KNN_test,y_KNN_pred)
  model_KNN_df = model_KNN_df.append({'Model':model,'MSE':model_KNN_mse,'MAE':model_KNN_mae}, ignore_index=True)
  model_KNN_df = model_KNN_df.sort_values(by='MSE', ascending= True)
model_KNN_df

"""## Use ensemble method"""

from sklearn.ensemble import VotingRegressor
# Models
r1_t1 = LinearRegression()
r2_t1 = RandomForestRegressor()
r3_t1 = GradientBoostingRegressor()
r4_t1 = AdaBoostRegressor()
r5_t1 = KNeighborsRegressor()
# Possible ensembles
est_t1c1=[('reg1', r1_t1), ('reg2', r2_t1)]
est_t1c2=[('reg1', r1_t1), ('reg3', r3_t1)]
est_t1c3=[('reg1', r1_t1), ('reg4', r4_t1)]
est_t1c4=[('reg1', r1_t1), ('reg5', r5_t1)]
est_t1c5=[('reg2', r2_t1), ('reg3', r3_t1)]
est_t1c6=[('reg2', r2_t1), ('reg4', r4_t1)]
est_t1c7=[('reg2', r2_t1), ('reg5', r5_t1)]
est_t1c8=[('reg3', r3_t1), ('reg4', r4_t1)]
est_t1c9=[('reg3', r3_t1), ('reg5', r5_t1)]
est_t1c10=[('reg4', r4_t1), ('reg5', r5_t1)]
est_t1c11=[('reg1', r1_t1), ('reg2', r2_t1), ('reg3', r3_t1)]
est_t1c12=[('reg1', r1_t1), ('reg2', r2_t1), ('reg4', r4_t1)]
est_t1c13=[('reg1', r1_t1), ('reg2', r2_t1), ('reg5', r5_t1)]
est_t1c14=[('reg1', r1_t1), ('reg3', r3_t1), ('reg4', r4_t1)]
est_t1c15=[('reg1', r1_t1), ('reg3', r3_t1), ('reg5', r5_t1)]
est_t1c16=[('reg1', r1_t1), ('reg4', r4_t1), ('reg5', r5_t1)]
est_t1c17=[('reg2', r2_t1), ('reg3', r3_t1), ('reg4', r4_t1)]
est_t1c18=[('reg2', r2_t1), ('reg3', r3_t1), ('reg5', r5_t1)]
est_t1c19=[('reg2', r2_t1), ('reg4', r4_t1), ('reg5', r5_t1)]
est_t1c20=[('reg3', r3_t1), ('reg4', r4_t1), ('reg5', r5_t1)]
est_t1c21=[('reg1', r1_t1), ('reg2', r2_t1), ('reg3', r3_t1), ('reg4', r4_t1)]
est_t1c22=[('reg1', r1_t1), ('reg2', r2_t1), ('reg3', r3_t1), ('reg5', r5_t1)]
est_t1c23=[('reg1', r1_t1), ('reg3', r3_t1), ('reg4', r4_t1), ('reg5', r5_t1)]
est_t1c24=[('reg2', r2_t1), ('reg3', r3_t1), ('reg4', r4_t1), ('reg5', r5_t1)]
est_t1c25=[('reg1', r1_t1), ('reg2', r2_t1), ('reg3', r3_t1), ('reg4', r4_t1), ('reg5', r5_t1)]
ens_list = [est_t1c1,est_t1c2,est_t1c3,est_t1c4,est_t1c5,est_t1c6,est_t1c7,est_t1c8,est_t1c9,est_t1c10,
            est_t1c11,est_t1c12,est_t1c13,est_t1c14,est_t1c15,est_t1c16,est_t1c17,est_t1c18,est_t1c19,est_t1c20,
            est_t1c21,est_t1c22,est_t1c23,est_t1c24,est_t1c25]
#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
X_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
y_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE']
model_ens_t1_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t1 = VotingRegressor(i).fit(X_KNN_train,X_KNN_test)
  # Predict with our ensemble model
  ensemble_t1_pred = ensemble_t1.predict(y_KNN_train)
  model_ens_t1_mse = mean_squared_error(ensemble_t1_pred,y_KNN_test)
  model_ens_t1_mae = mean_absolute_error(ensemble_t1_pred,y_KNN_test)
  model_scores_ens_t1 = (ensemble_t1,y_KNN_test,ensemble_t1_pred)
  model_ens_t1_df = model_ens_t1_df.append({'Model':i,'MSE':model_ens_t1_mse,'MAE':model_ens_t1_mae}, ignore_index=True)
  model_ens_t1_df = model_ens_t1_df.sort_values(by='MSE', ascending= True)
model_ens_t1_df.head()

model_ens_t1_df['Model'][0]

"""# Need to Reduce MSE!

# Trial 2 (Divide dataset by fire size)
  - Division number: 10

- 1st Division (Fire Size < 1)

  - GradientBoostingRegressor outperformed!
"""

# 1st Division (Fire Size < 1)
Fires_t2_div1 = Fires_KNN[Fires_KNN['FIRE_SIZE'] <= 1]
XT2d1_train = Fires_t2_div1[Fires_t2_div1['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT2d1_test = Fires_t2_div1[Fires_t2_div1['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT2d1_train = Fires_t2_div1[Fires_t2_div1['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT2d1_test = Fires_t2_div1[Fires_t2_div1['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T2d1 = dict()       
model_T2d1_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T2d1 = model().fit(XT2d1_train,XT2d1_test)
  y_T2d1_pred = regressor_T2d1.predict(yT2d1_train)
  model_T2d1_mse = mean_squared_error(y_T2d1_pred,yT2d1_test)
  model_T2d1_mae = mean_absolute_error(y_T2d1_pred,yT2d1_test)
  model_scores_T2d1[model] = (regressor_T2d1,yT2d1_test,y_T2d1_pred)
  model_T2d1_df = model_T2d1_df.append({'Model':model,'MSE':model_T2d1_mse,'MAE':model_T2d1_mae}, ignore_index=True)
  model_T2d1_df = model_T2d1_df.sort_values(by='MSE', ascending= True)
model_T2d1_df.head()

# Ensemble method
model_ens_t2d1_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t2d1 = VotingRegressor(i).fit(XT2d1_train,XT2d1_test)
  # Predict with our ensemble model
  ensemble_t2d1_pred = ensemble_t2d1.predict(yT2d1_train)
  model_ens_t2d1_mse = mean_squared_error(ensemble_t2d1_pred,yT2d1_test)
  model_ens_t2d1_mae = mean_absolute_error(ensemble_t2d1_pred,yT2d1_test)
  model_scores_ens_t2d1 = (ensemble_t2d1,yT2d1_test,ensemble_t2d1_pred)
  model_ens_t2d1_df = model_ens_t2d1_df.append({'Model':i,'MSE':model_ens_t2d1_mse,'MAE':model_ens_t2d1_mae}, ignore_index=True)
  model_ens_t2d1_df = model_ens_t2d1_df.sort_values(by='MSE', ascending= True)
model_ens_t2d1_df.head()

model_ens_t2d1_df['Model'][0]

"""- 2nd Division (1<= Fire Size <= 2)

  - GradientBoostingRegressor outperformed!
"""

# 2nd Division (1<= Fire Size <= 2)
Fires_t2_div2 = Fires_KNN[(Fires_KNN['FIRE_SIZE'] >= 1) & (Fires_KNN['FIRE_SIZE'] <= 2)]
XT2d2_train = Fires_t2_div2[Fires_t2_div2['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT2d2_test = Fires_t2_div2[Fires_t2_div2['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT2d2_train = Fires_t2_div2[Fires_t2_div2['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT2d2_test = Fires_t2_div2[Fires_t2_div2['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T2d2 = dict()       
model_T2d2_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T2d2 = model().fit(XT2d2_train,XT2d2_test)
  y_T2d2_pred = regressor_T2d2.predict(yT2d2_train)
  model_T2d2_mse = mean_squared_error(y_T2d2_pred,yT2d2_test)
  model_T2d2_mae = mean_absolute_error(y_T2d2_pred,yT2d2_test)
  model_scores_T2d2[model] = (regressor_T2d2,yT2d2_test,y_T2d2_pred)
  model_T2d2_df = model_T2d2_df.append({'Model':model,'MSE':model_T2d2_mse,'MAE':model_T2d2_mae}, ignore_index=True)
  model_T2d2_df = model_T2d2_df.sort_values(by='MSE', ascending= True)
model_T2d2_df

# Ensemble method
model_ens_t2d2_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t2d2 = VotingRegressor(i).fit(XT2d2_train,XT2d2_test)
  # Predict with our ensemble model
  ensemble_t2d2_pred = ensemble_t2d2.predict(yT2d2_train)
  model_ens_t2d2_mse = mean_squared_error(ensemble_t2d2_pred,yT2d2_test)
  model_ens_t2d2_mae = mean_absolute_error(ensemble_t2d2_pred,yT2d2_test)
  model_scores_ens_t2d2 = (ensemble_t2d2,yT2d2_test,ensemble_t2d2_pred)
  model_ens_t2d2_df = model_ens_t2d2_df.append({'Model':i,'MSE':model_ens_t2d2_mse,'MAE':model_ens_t2d2_mae}, ignore_index=True)
  model_ens_t2d2_df = model_ens_t2d2_df.sort_values(by='MSE', ascending= True)
model_ens_t2d2_df.head()

model_ens_t2d2_df['Model'][0]

"""- 3rd Division (2< Fire Size <= 5)

  - GradientBoostingRegressor outperformed!
"""

# 3rd Division (2 < Fire Size <= 5)
Fires_t2_div3 = Fires_KNN[(Fires_KNN['FIRE_SIZE'] > 2) & (Fires_KNN['FIRE_SIZE'] <= 5)]
XT2d3_train = Fires_t2_div3[Fires_t2_div3['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT2d3_test = Fires_t2_div3[Fires_t2_div3['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT2d3_train = Fires_t2_div3[Fires_t2_div3['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT2d3_test = Fires_t2_div3[Fires_t2_div3['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T2d3 = dict()       
model_T2d3_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T2d3 = model().fit(XT2d3_train,XT2d3_test)
  y_T2d3_pred = regressor_T2d3.predict(yT2d3_train)
  model_T2d3_mse = mean_squared_error(y_T2d3_pred,yT2d3_test)
  model_T2d3_mae = mean_absolute_error(y_T2d3_pred,yT2d3_test)
  model_scores_T2d3[model] = (regressor_T2d3,yT2d3_test,y_T2d3_pred)
  model_T2d3_df = model_T2d3_df.append({'Model':model,'MSE':model_T2d3_mse,'MAE':model_T2d3_mae}, ignore_index=True)
  model_T2d3_df = model_T2d3_df.sort_values(by='MSE', ascending= True)
model_T2d3_df

# Ensemble method
model_ens_t2d3_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t2d3 = VotingRegressor(i).fit(XT2d3_train,XT2d3_test)
  # Predict with our ensemble model
  ensemble_t2d3_pred = ensemble_t2d3.predict(yT2d3_train)
  model_ens_t2d3_mse = mean_squared_error(ensemble_t2d3_pred,yT2d3_test)
  model_ens_t2d3_mae = mean_absolute_error(ensemble_t2d3_pred,yT2d3_test)
  model_scores_ens_t2d3 = (ensemble_t2d3,yT2d3_test,ensemble_t2d3_pred)
  model_ens_t2d3_df = model_ens_t2d3_df.append({'Model':i,'MSE':model_ens_t2d3_mse,'MAE':model_ens_t2d3_mae}, ignore_index=True)
  model_ens_t2d3_df = model_ens_t2d3_df.sort_values(by='MSE', ascending= True)
model_ens_t2d3_df.head()

model_ens_t2d3_df['Model'][0]

"""- 4th Division (5< Fire Size <= 15)

  - LinearRegression outperformed!
"""

# 4th Division (5 < Fire Size <= 15)
Fires_t2_div4 = Fires_KNN[(Fires_KNN['FIRE_SIZE'] > 5) & (Fires_KNN['FIRE_SIZE'] <= 15)]
XT2d4_train = Fires_t2_div4[Fires_t2_div4['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT2d4_test = Fires_t2_div4[Fires_t2_div4['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT2d4_train = Fires_t2_div4[Fires_t2_div4['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT2d4_test = Fires_t2_div4[Fires_t2_div4['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T2d4 = dict()       
model_T2d4_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T2d4 = model().fit(XT2d4_train,XT2d4_test)
  y_T2d4_pred = regressor_T2d4.predict(yT2d4_train)
  model_T2d4_mse = mean_squared_error(y_T2d4_pred,yT2d4_test)
  model_T2d4_mae = mean_absolute_error(y_T2d4_pred,yT2d4_test)
  model_scores_T2d4[model] = (regressor_T2d4,yT2d4_test,y_T2d4_pred)
  model_T2d4_df = model_T2d4_df.append({'Model':model,'MSE':model_T2d4_mse,'MAE':model_T2d4_mae}, ignore_index=True)
  model_T2d4_df = model_T2d4_df.sort_values(by='MSE', ascending= True)
model_T2d4_df

# Ensemble method
model_ens_t2d4_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t2d4 = VotingRegressor(i).fit(XT2d4_train,XT2d4_test)
  # Predict with our ensemble model
  ensemble_t2d4_pred = ensemble_t2d4.predict(yT2d4_train)
  model_ens_t2d4_mse = mean_squared_error(ensemble_t2d4_pred,yT2d4_test)
  model_ens_t2d4_mae = mean_absolute_error(ensemble_t2d4_pred,yT2d4_test)
  model_scores_ens_t2d4 = (ensemble_t2d4,yT2d4_test,ensemble_t2d4_pred)
  model_ens_t2d4_df = model_ens_t2d4_df.append({'Model':i,'MSE':model_ens_t2d4_mse,'MAE':model_ens_t2d4_mae}, ignore_index=True)
  model_ens_t2d4_df = model_ens_t2d4_df.sort_values(by='MSE', ascending= True)
model_ens_t2d4_df.head()

model_ens_t2d4_df['Model'][0]

"""- 5th Division (15< Fire Size <= 40)

  - GradientBoostingRegressor outperformed!
"""

# 5th Division (15 < Fire Size <= 40)
Fires_t2_div5 = Fires_KNN[(Fires_KNN['FIRE_SIZE'] > 15) & (Fires_KNN['FIRE_SIZE'] <= 40)]
XT2d5_train = Fires_t2_div5[Fires_t2_div5['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT2d5_test = Fires_t2_div5[Fires_t2_div5['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT2d5_train = Fires_t2_div5[Fires_t2_div5['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT2d5_test = Fires_t2_div5[Fires_t2_div5['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T2d5 = dict()       
model_T2d5_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T2d5 = model().fit(XT2d5_train,XT2d5_test)
  y_T2d5_pred = regressor_T2d5.predict(yT2d5_train)
  model_T2d5_mse = mean_squared_error(y_T2d5_pred,yT2d5_test)
  model_T2d5_mae = mean_absolute_error(y_T2d5_pred,yT2d5_test)
  model_scores_T2d5[model] = (regressor_T2d5,yT2d5_test,y_T2d5_pred)
  model_T2d5_df = model_T2d5_df.append({'Model':model,'MSE':model_T2d5_mse,'MAE':model_T2d5_mae}, ignore_index=True)
  model_T2d5_df = model_T2d5_df.sort_values(by='MSE', ascending= True)
model_T2d5_df

# Ensemble method
model_ens_t2d5_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t2d5 = VotingRegressor(i).fit(XT2d5_train,XT2d5_test)
  # Predict with our ensemble model
  ensemble_t2d5_pred = ensemble_t2d5.predict(yT2d5_train)
  model_ens_t2d5_mse = mean_squared_error(ensemble_t2d5_pred,yT2d5_test)
  model_ens_t2d5_mae = mean_absolute_error(ensemble_t2d5_pred,yT2d5_test)
  model_scores_ens_t2d5 = (ensemble_t2d5,yT2d5_test,ensemble_t2d5_pred)
  model_ens_t2d5_df = model_ens_t2d5_df.append({'Model':i,'MSE':model_ens_t2d5_mse,'MAE':model_ens_t2d5_mae}, ignore_index=True)
  model_ens_t2d5_df = model_ens_t2d5_df.sort_values(by='MSE', ascending= True)
model_ens_t2d5_df.head()

model_ens_t2d5_df['Model'][0]

"""- 6th Division (40< Fire Size <= 150)

  - AdaBoostRegressor outperformed!
"""

# 6th Division (40 < Fire Size <= 150)
Fires_t2_div6 = Fires_KNN[(Fires_KNN['FIRE_SIZE'] > 40) & (Fires_KNN['FIRE_SIZE'] <= 150)]
XT2d6_train = Fires_t2_div6[Fires_t2_div6['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT2d6_test = Fires_t2_div6[Fires_t2_div6['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT2d6_train = Fires_t2_div6[Fires_t2_div6['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT2d6_test = Fires_t2_div6[Fires_t2_div6['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T2d6 = dict()       
model_T2d6_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T2d6 = model().fit(XT2d6_train,XT2d6_test)
  y_T2d6_pred = regressor_T2d6.predict(yT2d6_train)
  model_T2d6_mse = mean_squared_error(y_T2d6_pred,yT2d6_test)
  model_T2d6_mae = mean_absolute_error(y_T2d6_pred,yT2d6_test)
  model_scores_T2d6[model] = (regressor_T2d6,yT2d6_test,y_T2d6_pred)
  model_T2d6_df = model_T2d6_df.append({'Model':model,'MSE':model_T2d6_mse,'MAE':model_T2d6_mae}, ignore_index=True)
  model_T2d6_df = model_T2d6_df.sort_values(by='MSE', ascending= True)
model_T2d6_df

# Ensemble method
model_ens_t2d6_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t2d6 = VotingRegressor(i).fit(XT2d6_train,XT2d6_test)
  # Predict with our ensemble model
  ensemble_t2d6_pred = ensemble_t2d6.predict(yT2d6_train)
  model_ens_t2d6_mse = mean_squared_error(ensemble_t2d6_pred,yT2d6_test)
  model_ens_t2d6_mae = mean_absolute_error(ensemble_t2d6_pred,yT2d6_test)
  model_scores_ens_t2d6 = (ensemble_t2d6,yT2d6_test,ensemble_t2d6_pred)
  model_ens_t2d6_df = model_ens_t2d6_df.append({'Model':i,'MSE':model_ens_t2d6_mse,'MAE':model_ens_t2d6_mae}, ignore_index=True)
  model_ens_t2d6_df = model_ens_t2d6_df.sort_values(by='MSE', ascending= True)
model_ens_t2d6_df.head()

model_ens_t2d6_df['Model'][0]

"""- 7th Division (150< Fire Size <= 600)

  - LinearRegression outperformed!
"""

# 7th Division (150 < Fire Size <= 600)
Fires_t2_div7 = Fires_KNN[(Fires_KNN['FIRE_SIZE'] > 150) & (Fires_KNN['FIRE_SIZE'] <= 600)]
XT2d7_train = Fires_t2_div7[Fires_t2_div7['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT2d7_test = Fires_t2_div7[Fires_t2_div7['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT2d7_train = Fires_t2_div7[Fires_t2_div7['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT2d7_test = Fires_t2_div7[Fires_t2_div7['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T2d7 = dict()       
model_T2d7_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T2d7 = model().fit(XT2d7_train,XT2d7_test)
  y_T2d7_pred = regressor_T2d7.predict(yT2d7_train)
  model_T2d7_mse = mean_squared_error(y_T2d7_pred,yT2d7_test)
  model_T2d7_mae = mean_absolute_error(y_T2d7_pred,yT2d7_test)
  model_scores_T2d7[model] = (regressor_T2d7,yT2d7_test,y_T2d7_pred)
  model_T2d7_df = model_T2d7_df.append({'Model':model,'MSE':model_T2d7_mse,'MAE':model_T2d7_mae}, ignore_index=True)
  model_T2d7_df = model_T2d7_df.sort_values(by='MSE', ascending= True)
model_T2d7_df

# Ensemble method
model_ens_t2d7_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t2d7 = VotingRegressor(i).fit(XT2d7_train,XT2d7_test)
  # Predict with our ensemble model
  ensemble_t2d7_pred = ensemble_t2d7.predict(yT2d7_train)
  model_ens_t2d7_mse = mean_squared_error(ensemble_t2d7_pred,yT2d7_test)
  model_ens_t2d7_mae = mean_absolute_error(ensemble_t2d7_pred,yT2d7_test)
  model_scores_ens_t2d7 = (ensemble_t2d7,yT2d7_test,ensemble_t2d7_pred)
  model_ens_t2d7_df = model_ens_t2d7_df.append({'Model':i,'MSE':model_ens_t2d7_mse,'MAE':model_ens_t2d7_mae}, ignore_index=True)
  model_ens_t2d7_df = model_ens_t2d7_df.sort_values(by='MSE', ascending= True)
model_ens_t2d7_df.head()

model_ens_t2d7_df['Model'][0]

"""- 8th Division (600< Fire Size <= 1000)

  - KNeighborsRegressor outperformed!
"""

# 8th Division (600 < Fire Size <= 1000)
Fires_t2_div8 = Fires_KNN[(Fires_KNN['FIRE_SIZE'] > 600) & (Fires_KNN['FIRE_SIZE'] <= 1000)]
XT2d8_train = Fires_t2_div8[Fires_t2_div8['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT2d8_test = Fires_t2_div8[Fires_t2_div8['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT2d8_train = Fires_t2_div8[Fires_t2_div8['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT2d8_test = Fires_t2_div8[Fires_t2_div8['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T2d8 = dict()       
model_T2d8_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T2d8 = model().fit(XT2d8_train,XT2d8_test)
  y_T2d8_pred = regressor_T2d8.predict(yT2d8_train)
  model_T2d8_mse = mean_squared_error(y_T2d8_pred,yT2d8_test)
  model_T2d8_mae = mean_absolute_error(y_T2d8_pred,yT2d8_test)
  model_scores_T2d8[model] = (regressor_T2d8,yT2d8_test,y_T2d8_pred)
  model_T2d8_df = model_T2d8_df.append({'Model':model,'MSE':model_T2d8_mse,'MAE':model_T2d8_mae}, ignore_index=True)
  model_T2d8_df = model_T2d8_df.sort_values(by='MSE', ascending= True)
model_T2d8_df

# Ensemble method
model_ens_t2d8_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t2d8 = VotingRegressor(i).fit(XT2d8_train,XT2d8_test)
  # Predict with our ensemble model
  ensemble_t2d8_pred = ensemble_t2d8.predict(yT2d8_train)
  model_ens_t2d8_mse = mean_squared_error(ensemble_t2d8_pred,yT2d8_test)
  model_ens_t2d8_mae = mean_absolute_error(ensemble_t2d8_pred,yT2d8_test)
  model_scores_ens_t2d8 = (ensemble_t2d8,yT2d8_test,ensemble_t2d8_pred)
  model_ens_t2d8_df = model_ens_t2d8_df.append({'Model':i,'MSE':model_ens_t2d8_mse,'MAE':model_ens_t2d8_mae}, ignore_index=True)
  model_ens_t2d8_df = model_ens_t2d8_df.sort_values(by='MSE', ascending= True)
model_ens_t2d8_df.head()

model_ens_t2d8_df['Model'][0]

"""- 9th Division (1000< Fire Size <= 10000)

  - LinearRegression outperformed!
"""

# 9th Division (1000 < Fire Size <= 10000)
Fires_t2_div9 = Fires_KNN[(Fires_KNN['FIRE_SIZE'] > 1000) & (Fires_KNN['FIRE_SIZE'] <= 10000)]
XT2d9_train = Fires_t2_div9[Fires_t2_div9['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT2d9_test = Fires_t2_div9[Fires_t2_div9['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT2d9_train = Fires_t2_div9[Fires_t2_div9['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT2d9_test = Fires_t2_div9[Fires_t2_div9['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T2d9 = dict()       
model_T2d9_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T2d9 = model().fit(XT2d9_train,XT2d9_test)
  y_T2d9_pred = regressor_T2d9.predict(yT2d9_train)
  model_T2d9_mse = mean_squared_error(y_T2d9_pred,yT2d9_test)
  model_T2d9_mae = mean_absolute_error(y_T2d9_pred,yT2d9_test)
  model_scores_T2d9[model] = (regressor_T2d9,yT2d9_test,y_T2d9_pred)
  model_T2d9_df = model_T2d9_df.append({'Model':model,'MSE':model_T2d9_mse,'MAE':model_T2d9_mae}, ignore_index=True)
  model_T2d9_df = model_T2d9_df.sort_values(by='MSE', ascending= True)
model_T2d9_df

# Ensemble method
model_ens_t2d9_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t2d9 = VotingRegressor(i).fit(XT2d9_train,XT2d9_test)
  # Predict with our ensemble model
  ensemble_t2d9_pred = ensemble_t2d9.predict(yT2d9_train)
  model_ens_t2d9_mse = mean_squared_error(ensemble_t2d9_pred,yT2d9_test)
  model_ens_t2d9_mae = mean_absolute_error(ensemble_t2d9_pred,yT2d9_test)
  model_scores_ens_t2d9 = (ensemble_t2d9,yT2d9_test,ensemble_t2d9_pred)
  model_ens_t2d9_df = model_ens_t2d9_df.append({'Model':i,'MSE':model_ens_t2d9_mse,'MAE':model_ens_t2d9_mae}, ignore_index=True)
  model_ens_t2d9_df = model_ens_t2d9_df.sort_values(by='MSE', ascending= True)
model_ens_t2d9_df.head()

model_ens_t2d9_df['Model'][0]

"""- 10th Division (Fire Size > 10000)

  - KNeighborsRegressor outperformed!
"""

# 10th Division (Fire Size > 10000)
Fires_t2_div10 = Fires_KNN[Fires_KNN['FIRE_SIZE'] > 10000]
XT2d10_train = Fires_t2_div10[Fires_t2_div10['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT2d10_test = Fires_t2_div10[Fires_t2_div10['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT2d10_train = Fires_t2_div10[Fires_t2_div10['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT2d10_test = Fires_t2_div10[Fires_t2_div10['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T2d10 = dict()       
model_T2d10_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T2d10 = model().fit(XT2d10_train,XT2d10_test)
  y_T2d10_pred = regressor_T2d10.predict(yT2d10_train)
  model_T2d10_mse = mean_squared_error(y_T2d10_pred,yT2d10_test)
  model_T2d10_mae = mean_absolute_error(y_T2d10_pred,yT2d10_test)
  model_scores_T2d10[model] = (regressor_T2d10,yT2d10_test,y_T2d10_pred)
  model_T2d10_df = model_T2d10_df.append({'Model':model,'MSE':model_T2d10_mse,'MAE':model_T2d10_mae}, ignore_index=True)
  model_T2d10_df = model_T2d10_df.sort_values(by='MSE', ascending= True)
model_T2d10_df

# Ensemble method
model_ens_t2d10_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t2d10 = VotingRegressor(i).fit(XT2d10_train,XT2d10_test)
  # Predict with our ensemble model
  ensemble_t2d10_pred = ensemble_t2d10.predict(yT2d10_train)
  model_ens_t2d10_mse = mean_squared_error(ensemble_t2d10_pred,yT2d10_test)
  model_ens_t2d10_mae = mean_absolute_error(ensemble_t2d10_pred,yT2d10_test)
  model_scores_ens_t2d10 = (ensemble_t2d10,yT2d10_test,ensemble_t2d10_pred)
  model_ens_t2d10_df = model_ens_t2d10_df.append({'Model':i,'MSE':model_ens_t2d10_mse,'MAE':model_ens_t2d10_mae}, ignore_index=True)
  model_ens_t2d10_df = model_ens_t2d10_df.sort_values(by='MSE', ascending= True)
model_ens_t2d10_df.head()

model_ens_t2d10_df['Model'][0]

"""# Trial 3 : Divide by FIRE_SIZE_CLASS
  - Division: Class A vs. Class B vs. Class C vs. Class D vs. Class E vs. Class F vs. Class G
"""

Fires_KNN['FIRE_SIZE_CLASS'].hist()

"""- 1st Division (Fire Size Class A)"""

# 1st Division (Fire Size Class A)
Fires_t3_div1 = Fires_KNN[Fires_KNN['FIRE_SIZE_CLASS'] == 'A']
XT3d1_train = Fires_t3_div1[Fires_t3_div1['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT3d1_test = Fires_t3_div1[Fires_t3_div1['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT3d1_train = Fires_t3_div1[Fires_t3_div1['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT3d1_test = Fires_t3_div1[Fires_t3_div1['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T3d1 = dict()       
model_T3d1_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T3d1 = model().fit(XT3d1_train,XT3d1_test)
  y_T3d1_pred = regressor_T3d1.predict(yT3d1_train)
  model_T3d1_mse = mean_squared_error(y_T3d1_pred,yT3d1_test)
  model_T3d1_mae = mean_absolute_error(y_T3d1_pred,yT3d1_test)
  model_scores_T3d1[model] = (regressor_T3d1,yT3d1_test,y_T3d1_pred)
  model_T3d1_df = model_T3d1_df.append({'Model':model,'MSE':model_T3d1_mse,'MAE':model_T3d1_mae}, ignore_index=True)
  model_T3d1_df = model_T3d1_df.sort_values(by='MSE', ascending= True)
model_T3d1_df.head()

# Ensemble method
model_ens_t3d1_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t3d1 = VotingRegressor(i).fit(XT3d1_train,XT3d1_test)
  # Predict with our ensemble model
  ensemble_t3d1_pred = ensemble_t3d1.predict(yT3d1_train)
  model_ens_t3d1_mse = mean_squared_error(ensemble_t3d1_pred,yT3d1_test)
  model_ens_t3d1_mae = mean_absolute_error(ensemble_t3d1_pred,yT3d1_test)
  model_scores_ens_t3d1 = (ensemble_t3d1,yT3d1_test,ensemble_t3d1_pred)
  model_ens_t3d1_df = model_ens_t3d1_df.append({'Model':i,'MSE':model_ens_t3d1_mse,'MAE':model_ens_t3d1_mae}, ignore_index=True)
  model_ens_t3d1_df = model_ens_t3d1_df.sort_values(by='MSE', ascending= True)
model_ens_t3d1_df.head()

model_ens_t3d1_df['Model'][0]

"""- 2nd Division (Fire Size Class B)"""

# 2nd Division (Fire Size Class B)
Fires_t3_div2 = Fires_KNN[Fires_KNN['FIRE_SIZE_CLASS'] == 'B']
XT3d2_train = Fires_t3_div2[Fires_t3_div2['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT3d2_test = Fires_t3_div2[Fires_t3_div2['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT3d2_train = Fires_t3_div2[Fires_t3_div2['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT3d2_test = Fires_t3_div2[Fires_t3_div2['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T3d2 = dict()       
model_T3d2_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T3d2 = model().fit(XT3d2_train,XT3d2_test)
  y_T3d2_pred = regressor_T3d2.predict(yT3d2_train)
  model_T3d2_mse = mean_squared_error(y_T3d2_pred,yT3d2_test)
  model_T3d2_mae = mean_absolute_error(y_T3d2_pred,yT3d2_test)
  model_scores_T3d2[model] = (regressor_T3d2,yT3d2_test,y_T3d2_pred)
  model_T3d2_df = model_T3d2_df.append({'Model':model,'MSE':model_T3d2_mse,'MAE':model_T3d2_mae}, ignore_index=True)
  model_T3d2_df = model_T3d2_df.sort_values(by='MSE', ascending= True)
model_T3d2_df

# Ensemble method
model_ens_t3d2_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t3d2 = VotingRegressor(i).fit(XT3d2_train,XT3d2_test)
  # Predict with our ensemble model
  ensemble_t3d2_pred = ensemble_t3d2.predict(yT3d2_train)
  model_ens_t3d2_mse = mean_squared_error(ensemble_t3d2_pred,yT3d2_test)
  model_ens_t3d2_mae = mean_absolute_error(ensemble_t3d2_pred,yT3d2_test)
  model_scores_ens_t3d2 = (ensemble_t3d2,yT3d2_test,ensemble_t3d2_pred)
  model_ens_t3d2_df = model_ens_t3d2_df.append({'Model':i,'MSE':model_ens_t3d2_mse,'MAE':model_ens_t3d2_mae}, ignore_index=True)
  model_ens_t3d2_df = model_ens_t3d2_df.sort_values(by='MSE', ascending= True)
model_ens_t3d2_df.head()

model_ens_t3d2_df['Model'][0]

"""- 3rd Division (Fire Size Class C)"""

# 3rd Division (Fire Size Class C)
Fires_t3_div3 = Fires_KNN[Fires_KNN['FIRE_SIZE_CLASS'] == 'C']
XT3d3_train = Fires_t3_div3[Fires_t3_div3['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT3d3_test = Fires_t3_div3[Fires_t3_div3['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT3d3_train = Fires_t3_div3[Fires_t3_div3['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT3d3_test = Fires_t3_div3[Fires_t3_div3['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T3d3 = dict()       
model_T3d3_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T3d3 = model().fit(XT3d3_train,XT3d3_test)
  y_T3d3_pred = regressor_T3d3.predict(yT3d3_train)
  model_T3d3_mse = mean_squared_error(y_T3d3_pred,yT3d3_test)
  model_T3d3_mae = mean_absolute_error(y_T3d3_pred,yT3d3_test)
  model_scores_T3d3[model] = (regressor_T3d3,yT3d3_test,y_T3d3_pred)
  model_T3d3_df = model_T3d3_df.append({'Model':model,'MSE':model_T3d3_mse,'MAE':model_T3d3_mae}, ignore_index=True)
  model_T3d3_df = model_T3d3_df.sort_values(by='MSE', ascending= True)
model_T3d3_df

# Ensemble method
model_ens_t3d3_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t3d3 = VotingRegressor(i).fit(XT3d3_train,XT3d3_test)
  # Predict with our ensemble model
  ensemble_t3d3_pred = ensemble_t3d3.predict(yT3d3_train)
  model_ens_t3d3_mse = mean_squared_error(ensemble_t3d3_pred,yT3d3_test)
  model_ens_t3d3_mae = mean_absolute_error(ensemble_t3d3_pred,yT3d3_test)
  model_scores_ens_t3d3 = (ensemble_t3d3,yT3d3_test,ensemble_t3d3_pred)
  model_ens_t3d3_df = model_ens_t3d3_df.append({'Model':i,'MSE':model_ens_t3d3_mse,'MAE':model_ens_t3d3_mae}, ignore_index=True)
  model_ens_t3d3_df = model_ens_t3d3_df.sort_values(by='MSE', ascending= True)
model_ens_t3d3_df.head()

model_ens_t3d3_df['Model'][0]

"""- 4th Division (Fire Size Class D)"""

# 4th Division (Fire Size Class D)
Fires_t3_div4 = Fires_KNN[Fires_KNN['FIRE_SIZE_CLASS'] == 'D']
XT3d4_train = Fires_t3_div4[Fires_t3_div4['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT3d4_test = Fires_t3_div4[Fires_t3_div4['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT3d4_train = Fires_t3_div4[Fires_t3_div4['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT3d4_test = Fires_t3_div4[Fires_t3_div4['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T3d4 = dict()       
model_T3d4_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T3d4 = model().fit(XT3d4_train,XT3d4_test)
  y_T3d4_pred = regressor_T3d4.predict(yT3d4_train)
  model_T3d4_mse = mean_squared_error(y_T3d4_pred,yT3d4_test)
  model_T3d4_mae = mean_absolute_error(y_T3d4_pred,yT3d4_test)
  model_scores_T3d4[model] = (regressor_T3d4,yT3d4_test,y_T3d4_pred)
  model_T3d4_df = model_T3d4_df.append({'Model':model,'MSE':model_T3d4_mse,'MAE':model_T3d4_mae}, ignore_index=True)
  model_T3d4_df = model_T3d4_df.sort_values(by='MSE', ascending= True)
model_T3d4_df

# Ensemble method
model_ens_t3d4_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t3d4 = VotingRegressor(i).fit(XT3d4_train,XT3d4_test)
  # Predict with our ensemble model
  ensemble_t3d4_pred = ensemble_t3d4.predict(yT3d4_train)
  model_ens_t3d4_mse = mean_squared_error(ensemble_t3d4_pred,yT3d4_test)
  model_ens_t3d4_mae = mean_absolute_error(ensemble_t3d4_pred,yT3d4_test)
  model_scores_ens_t3d4 = (ensemble_t3d4,yT3d4_test,ensemble_t3d4_pred)
  model_ens_t3d4_df = model_ens_t3d4_df.append({'Model':i,'MSE':model_ens_t3d4_mse,'MAE':model_ens_t3d4_mae}, ignore_index=True)
  model_ens_t3d4_df = model_ens_t3d4_df.sort_values(by='MSE', ascending= True)
model_ens_t3d4_df.head()

model_ens_t3d4_df['Model'][0]

"""- 5th Division (Fire Size Class E)"""

# 5th Division (Fire Size Class E)
Fires_t3_div5 = Fires_KNN[Fires_KNN['FIRE_SIZE_CLASS'] == 'E']
XT3d5_train = Fires_t3_div5[Fires_t3_div5['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT3d5_test = Fires_t3_div5[Fires_t3_div5['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT3d5_train = Fires_t3_div5[Fires_t3_div5['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT3d5_test = Fires_t3_div5[Fires_t3_div5['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T3d5 = dict()       
model_T3d5_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T3d5 = model().fit(XT3d5_train,XT3d5_test)
  y_T3d5_pred = regressor_T3d5.predict(yT3d5_train)
  model_T3d5_mse = mean_squared_error(y_T3d5_pred,yT3d5_test)
  model_T3d5_mae = mean_absolute_error(y_T3d5_pred,yT3d5_test)
  model_scores_T3d5[model] = (regressor_T3d5,yT3d5_test,y_T3d5_pred)
  model_T3d5_df = model_T3d5_df.append({'Model':model,'MSE':model_T3d5_mse,'MAE':model_T3d5_mae}, ignore_index=True)
  model_T3d5_df = model_T3d5_df.sort_values(by='MSE', ascending= True)
model_T3d5_df

# Ensemble method
model_ens_t3d5_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t3d5 = VotingRegressor(i).fit(XT3d5_train,XT3d5_test)
  # Predict with our ensemble model
  ensemble_t3d5_pred = ensemble_t3d5.predict(yT3d5_train)
  model_ens_t3d5_mse = mean_squared_error(ensemble_t3d5_pred,yT3d5_test)
  model_ens_t3d5_mae = mean_absolute_error(ensemble_t3d5_pred,yT3d5_test)
  model_scores_ens_t3d5 = (ensemble_t3d5,yT3d5_test,ensemble_t3d5_pred)
  model_ens_t3d5_df = model_ens_t3d5_df.append({'Model':i,'MSE':model_ens_t3d5_mse,'MAE':model_ens_t3d5_mae}, ignore_index=True)
  model_ens_t3d5_df = model_ens_t3d5_df.sort_values(by='MSE', ascending= True)
model_ens_t3d5_df.head()

model_ens_t3d5_df['Model'][0]

"""- 6th Division (Fire Size Class F)"""

# 6th Division (Fire Size Class F)
Fires_t3_div6 = Fires_KNN[Fires_KNN['FIRE_SIZE_CLASS'] == 'F']
XT3d6_train = Fires_t3_div6[Fires_t3_div6['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT3d6_test = Fires_t3_div6[Fires_t3_div6['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT3d6_train = Fires_t3_div6[Fires_t3_div6['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT3d6_test = Fires_t3_div6[Fires_t3_div6['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T3d6 = dict()       
model_T3d6_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T3d6 = model().fit(XT3d6_train,XT3d6_test)
  y_T3d6_pred = regressor_T3d6.predict(yT3d6_train)
  model_T3d6_mse = mean_squared_error(y_T3d6_pred,yT3d6_test)
  model_T3d6_mae = mean_absolute_error(y_T3d6_pred,yT3d6_test)
  model_scores_T3d6[model] = (regressor_T3d6,yT3d6_test,y_T3d6_pred)
  model_T3d6_df = model_T3d6_df.append({'Model':model,'MSE':model_T3d6_mse,'MAE':model_T3d6_mae}, ignore_index=True)
  model_T3d6_df = model_T3d6_df.sort_values(by='MSE', ascending= True)
model_T3d6_df

# Ensemble method
model_ens_t3d6_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t3d6 = VotingRegressor(i).fit(XT3d6_train,XT3d6_test)
  # Predict with our ensemble model
  ensemble_t3d6_pred = ensemble_t3d6.predict(yT3d6_train)
  model_ens_t3d6_mse = mean_squared_error(ensemble_t3d6_pred,yT3d6_test)
  model_ens_t3d6_mae = mean_absolute_error(ensemble_t3d6_pred,yT3d6_test)
  model_scores_ens_t3d6 = (ensemble_t3d6,yT3d6_test,ensemble_t3d6_pred)
  model_ens_t3d6_df = model_ens_t3d6_df.append({'Model':i,'MSE':model_ens_t3d6_mse,'MAE':model_ens_t3d6_mae}, ignore_index=True)
  model_ens_t3d6_df = model_ens_t3d6_df.sort_values(by='MSE', ascending= True)
model_ens_t3d6_df.head()

model_ens_t3d6_df['Model'][0]

"""- 7th Division (Fire Size Class G)"""

# 7th Division (Fire Size Class G)
Fires_t3_div7 = Fires_KNN[Fires_KNN['FIRE_SIZE_CLASS'] == 'G']
XT3d7_train = Fires_t3_div7[Fires_t3_div7['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT3d7_test = Fires_t3_div7[Fires_t3_div7['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT3d7_train = Fires_t3_div7[Fires_t3_div7['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT3d7_test = Fires_t3_div7[Fires_t3_div7['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T3d7 = dict()       
model_T3d7_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T3d7 = model().fit(XT3d7_train,XT3d7_test)
  y_T3d7_pred = regressor_T3d7.predict(yT3d7_train)
  model_T3d7_mse = mean_squared_error(y_T3d7_pred,yT3d7_test)
  model_T3d7_mae = mean_absolute_error(y_T3d7_pred,yT3d7_test)
  model_scores_T3d7[model] = (regressor_T3d7,yT3d7_test,y_T3d7_pred)
  model_T3d7_df = model_T3d7_df.append({'Model':model,'MSE':model_T3d7_mse,'MAE':model_T3d7_mae}, ignore_index=True)
  model_T3d7_df = model_T3d7_df.sort_values(by='MSE', ascending= True)
model_T3d7_df

# Ensemble method
model_ens_t3d7_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t3d7 = VotingRegressor(i).fit(XT3d7_train,XT3d7_test)
  # Predict with our ensemble model
  ensemble_t3d7_pred = ensemble_t3d7.predict(yT3d7_train)
  model_ens_t3d7_mse = mean_squared_error(ensemble_t3d7_pred,yT3d7_test)
  model_ens_t3d7_mae = mean_absolute_error(ensemble_t3d7_pred,yT3d7_test)
  model_scores_ens_t3d7 = (ensemble_t3d7,yT3d7_test,ensemble_t3d7_pred)
  model_ens_t3d7_df = model_ens_t3d7_df.append({'Model':i,'MSE':model_ens_t3d7_mse,'MAE':model_ens_t3d7_mae}, ignore_index=True)
  model_ens_t3d7_df = model_ens_t3d7_df.sort_values(by='MSE', ascending= True)
model_ens_t3d7_df.head()

model_ens_t3d7_df['Model'][0]

"""- 8th Division (Fire Size Class D,E,F,G)"""

# 8th Division (Fire Size Class D,E,F,G)
Fires_t3_div8 = Fires_KNN[(Fires_KNN['FIRE_SIZE_CLASS'] == 'D') | (Fires_KNN['FIRE_SIZE_CLASS'] == 'E') | (Fires_KNN['FIRE_SIZE_CLASS'] == 'F') | (Fires_KNN['FIRE_SIZE_CLASS'] == 'G')]
XT3d8_train = Fires_t3_div8[Fires_t3_div8['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT3d8_test = Fires_t3_div8[Fires_t3_div8['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT3d8_train = Fires_t3_div8[Fires_t3_div8['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT3d8_test = Fires_t3_div8[Fires_t3_div8['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T3d8 = dict()       
model_T3d8_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T3d8 = model().fit(XT3d8_train,XT3d8_test)
  y_T3d8_pred = regressor_T3d8.predict(yT3d8_train)
  model_T3d8_mse = mean_squared_error(y_T3d8_pred,yT3d8_test)
  model_T3d8_mae = mean_absolute_error(y_T3d8_pred,yT3d8_test)
  model_scores_T3d8[model] = (regressor_T3d8,yT3d8_test,y_T3d8_pred)
  model_T3d8_df = model_T3d8_df.append({'Model':model,'MSE':model_T3d8_mse,'MAE':model_T3d8_mae}, ignore_index=True)
  model_T3d8_df = model_T3d8_df.sort_values(by='MSE', ascending= True)
model_T3d8_df

# Ensemble method
model_ens_t3d8_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t3d8 = VotingRegressor(i).fit(XT3d8_train,XT3d8_test)
  # Predict with our ensemble model
  ensemble_t3d8_pred = ensemble_t3d8.predict(yT3d8_train)
  model_ens_t3d8_mse = mean_squared_error(ensemble_t3d8_pred,yT3d8_test)
  model_ens_t3d8_mae = mean_absolute_error(ensemble_t3d8_pred,yT3d8_test)
  model_scores_ens_t3d8 = (ensemble_t3d8,yT3d8_test,ensemble_t3d8_pred)
  model_ens_t3d8_df = model_ens_t3d8_df.append({'Model':i,'MSE':model_ens_t3d8_mse,'MAE':model_ens_t3d8_mae}, ignore_index=True)
  model_ens_t3d8_df = model_ens_t3d8_df.sort_values(by='MSE', ascending= True)
model_ens_t3d8_df.head()

model_ens_t3d8_df['Model'][0]

"""# Trail4: SMOTER: Handle imbalance data"""

pip install smogn

import smogn
Smoter_KNN = smogn.smoter(

    data = Fires_KNN.reset_index(), 
    y = "FIRE_SIZE"
)

Smoter_KNN['FIRE_SIZE'].hist()

"""### Baseline of SMOTER"""

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_SMOTER_train = Smoter_KNN[Smoter_KNN['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
X_SMOTER_test = Smoter_KNN[Smoter_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_SMOTER_train = Smoter_KNN[Smoter_KNN['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
y_SMOTER_test = Smoter_KNN[Smoter_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_SMOTER = dict()    
model_SMOTER_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_SMOTER = model().fit(X_SMOTER_train,X_SMOTER_test)
  y_SMOTER_pred = regressor_SMOTER.predict(y_SMOTER_train)
  model_SMOTER_mse = mean_squared_error(y_SMOTER_pred,y_SMOTER_test)
  model_SMOTER_mae = mean_absolute_error(y_SMOTER_pred,y_SMOTER_test)
  model_scores_SMOTER[model] = (regressor_SMOTER,y_SMOTER_test,y_SMOTER_pred)
  model_SMOTER_df = model_SMOTER_df.append({'Model':model,'MSE':model_SMOTER_mse,'MAE':model_SMOTER_mae}, ignore_index=True)
  model_SMOTER_df = model_SMOTER_df.sort_values(by='MSE', ascending= True)
model_SMOTER_df

"""## Use ensemble method"""

model_ens_t4_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t4 = VotingRegressor(i).fit(X_SMOTER_train,X_SMOTER_test)
  # Predict with our ensemble model
  ensemble_t4_pred = ensemble_t4.predict(y_SMOTER_train)
  model_ens_t4_mse = mean_squared_error(ensemble_t4_pred,y_SMOTER_test)
  model_ens_t4_mae = mean_absolute_error(ensemble_t4_pred,y_SMOTER_test)
  model_scores_ens_t4 = (ensemble_t4,y_SMOTER_test,ensemble_t4_pred)
  model_ens_t4_df = model_ens_t4_df.append({'Model':i,'MSE':model_ens_t4_mse,'MAE':model_ens_t4_mae}, ignore_index=True)
  model_ens_t4_df = model_ens_t4_df.sort_values(by='MSE', ascending= True)
model_ens_t4_df.head()

"""- 1st Division (Fire Size < 1)"""

# 1st Division (Fire Size < 1)
Fires_t4_div1 = Smoter_KNN[Smoter_KNN['FIRE_SIZE'] <= 1]
XT4d1_train = Fires_t4_div1[Fires_t4_div1['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT4d1_test = Fires_t4_div1[Fires_t4_div1['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT4d1_train = Fires_t4_div1[Fires_t4_div1['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT4d1_test = Fires_t4_div1[Fires_t4_div1['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor, SVR]
model_scores_T4d1 = dict()       
model_T4d1_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T4d1 = model().fit(XT4d1_train,XT4d1_test)
  y_T4d1_pred = regressor_T4d1.predict(yT4d1_train)
  model_T4d1_mse = mean_squared_error(y_T4d1_pred,yT4d1_test)
  model_T4d1_mae = mean_absolute_error(y_T4d1_pred,yT4d1_test)
  model_scores_T4d1[model] = (regressor_T4d1,yT4d1_test,y_T4d1_pred)
  model_T4d1_df = model_T4d1_df.append({'Model':model,'MSE':model_T4d1_mse,'MAE':model_T4d1_mae}, ignore_index=True)
  model_T4d1_df = model_T4d1_df.sort_values(by='MSE', ascending= True)
model_T4d1_df

# Ensemble method
model_ens_t4d1_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t4d1 = VotingRegressor(i).fit(XT4d1_train,XT4d1_test)
  # Predict with our ensemble model
  ensemble_t4d1_pred = ensemble_t4d1.predict(yT4d1_train)
  model_ens_t4d1_mse = mean_squared_error(ensemble_t4d1_pred,yT4d1_test)
  model_ens_t4d1_mae = mean_absolute_error(ensemble_t4d1_pred,yT4d1_test)
  model_scores_ens_t4d1 = (ensemble_t4d1,yT4d1_test,ensemble_t4d1_pred)
  model_ens_t4d1_df = model_ens_t4d1_df.append({'Model':i,'MSE':model_ens_t4d1_mse,'MAE':model_ens_t4d1_mae}, ignore_index=True)
  model_ens_t4d1_df = model_ens_t4d1_df.sort_values(by='MSE', ascending= True)
model_ens_t4d1_df.head()

model_ens_t4d1_df['Model'][0]

"""- 2nd Division (1<= Fire Size <= 2)"""

# 2nd Division (1<= Fire Size <= 2)
Fires_t4_div2 = Smoter_KNN[(Smoter_KNN['FIRE_SIZE'] >= 1) & (Smoter_KNN['FIRE_SIZE'] <= 2)]
XT4d2_train = Fires_t4_div2[Fires_t4_div2['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT4d2_test = Fires_t4_div2[Fires_t4_div2['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT4d2_train = Fires_t4_div2[Fires_t4_div2['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT4d2_test = Fires_t4_div2[Fires_t4_div2['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T4d2 = dict()       
model_T4d2_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T4d2 = model().fit(XT4d2_train,XT4d2_test)
  y_T4d2_pred = regressor_T4d2.predict(yT4d2_train)
  model_T4d2_mse = mean_squared_error(y_T4d2_pred,yT4d2_test)
  model_T4d2_mae = mean_absolute_error(y_T4d2_pred,yT4d2_test)
  model_scores_T4d2[model] = (regressor_T4d2,yT4d2_test,y_T4d2_pred)
  model_T4d2_df = model_T4d2_df.append({'Model':model,'MSE':model_T4d2_mse,'MAE':model_T4d2_mae}, ignore_index=True)
  model_T4d2_df = model_T4d2_df.sort_values(by='MSE', ascending= True)
model_T4d2_df

# Ensemble method
model_ens_t4d2_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t4d2 = VotingRegressor(i).fit(XT4d2_train,XT4d2_test)
  # Predict with our ensemble model
  ensemble_t4d2_pred = ensemble_t4d2.predict(yT4d2_train)
  model_ens_t4d2_mse = mean_squared_error(ensemble_t4d2_pred,yT4d2_test)
  model_ens_t4d2_mae = mean_absolute_error(ensemble_t4d2_pred,yT4d2_test)
  model_scores_ens_t4d2 = (ensemble_t4d2,yT4d2_test,ensemble_t4d2_pred)
  model_ens_t4d2_df = model_ens_t4d2_df.append({'Model':i,'MSE':model_ens_t4d2_mse,'MAE':model_ens_t4d2_mae}, ignore_index=True)
  model_ens_t4d2_df = model_ens_t4d2_df.sort_values(by='MSE', ascending= True)
model_ens_t4d2_df.head()

model_ens_t4d2_df['Model'][0]

"""- 3rd Division (2< Fire Size <= 5)"""

# 3rd Division (2 < Fire Size <= 5)
Fires_t4_div3 = Smoter_KNN[(Smoter_KNN['FIRE_SIZE'] > 2) & (Smoter_KNN['FIRE_SIZE'] <= 5)]
XT4d3_train = Fires_t4_div3[Fires_t4_div3['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT4d3_test = Fires_t4_div3[Fires_t4_div3['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT4d3_train = Fires_t4_div3[Fires_t4_div3['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT4d3_test = Fires_t4_div3[Fires_t4_div3['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T4d3 = dict()       
model_T4d3_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T4d3 = model().fit(XT4d3_train,XT4d3_test)
  y_T4d3_pred = regressor_T4d3.predict(yT4d3_train)
  model_T4d3_mse = mean_squared_error(y_T4d3_pred,yT4d3_test)
  model_T4d3_mae = mean_absolute_error(y_T4d3_pred,yT4d3_test)
  model_scores_T4d3[model] = (regressor_T4d3,yT4d3_test,y_T4d3_pred)
  model_T4d3_df = model_T4d3_df.append({'Model':model,'MSE':model_T4d3_mse,'MAE':model_T4d3_mae}, ignore_index=True)
  model_T4d3_df = model_T4d3_df.sort_values(by='MSE', ascending= True)
model_T4d3_df

# Ensemble method
model_ens_t4d3_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t4d3 = VotingRegressor(i).fit(XT4d3_train,XT4d3_test)
  # Predict with our ensemble model
  ensemble_t4d3_pred = ensemble_t4d3.predict(yT4d3_train)
  model_ens_t4d3_mse = mean_squared_error(ensemble_t4d3_pred,yT4d3_test)
  model_ens_t4d3_mae = mean_absolute_error(ensemble_t4d3_pred,yT4d3_test)
  model_scores_ens_t4d3 = (ensemble_t4d3,yT4d3_test,ensemble_t4d3_pred)
  model_ens_t4d3_df = model_ens_t4d3_df.append({'Model':i,'MSE':model_ens_t4d3_mse,'MAE':model_ens_t4d3_mae}, ignore_index=True)
  model_ens_t4d3_df = model_ens_t4d3_df.sort_values(by='MSE', ascending= True)
model_ens_t4d3_df.head()

model_ens_t4d3_df['Model'][0]

"""- 4th Division (5< Fire Size <= 15)"""

# 4th Division (5 < Fire Size <= 15)
Fires_t4_div4 = Smoter_KNN[(Smoter_KNN['FIRE_SIZE'] > 5) & (Smoter_KNN['FIRE_SIZE'] <= 15)]
XT4d4_train = Fires_t4_div4[Fires_t4_div4['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT4d4_test = Fires_t4_div4[Fires_t4_div4['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT4d4_train = Fires_t4_div4[Fires_t4_div4['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT4d4_test = Fires_t4_div4[Fires_t4_div4['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T4d4 = dict()       
model_T4d4_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T4d4 = model().fit(XT4d4_train,XT4d4_test)
  y_T4d4_pred = regressor_T4d4.predict(yT4d4_train)
  model_T4d4_mse = mean_squared_error(y_T4d4_pred,yT4d4_test)
  model_T4d4_mae = mean_absolute_error(y_T4d4_pred,yT4d4_test)
  model_scores_T4d4[model] = (regressor_T4d4,yT4d4_test,y_T4d4_pred)
  model_T4d4_df = model_T4d4_df.append({'Model':model,'MSE':model_T4d4_mse,'MAE':model_T4d4_mae}, ignore_index=True)
  model_T4d4_df = model_T4d4_df.sort_values(by='MSE', ascending= True)
model_T4d4_df

# Ensemble method
model_ens_t4d4_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t4d4 = VotingRegressor(i).fit(XT4d4_train,XT4d4_test)
  # Predict with our ensemble model
  ensemble_t4d4_pred = ensemble_t4d4.predict(yT4d4_train)
  model_ens_t4d4_mse = mean_squared_error(ensemble_t4d4_pred,yT4d4_test)
  model_ens_t4d4_mae = mean_absolute_error(ensemble_t4d4_pred,yT4d4_test)
  model_scores_ens_t4d4 = (ensemble_t4d4,yT4d4_test,ensemble_t4d4_pred)
  model_ens_t4d4_df = model_ens_t4d4_df.append({'Model':i,'MSE':model_ens_t4d4_mse,'MAE':model_ens_t4d4_mae}, ignore_index=True)
  model_ens_t4d4_df = model_ens_t4d4_df.sort_values(by='MSE', ascending= True)
model_ens_t4d4_df.head()

model_ens_t4d4_df['Model'][0]

"""- 5th Division (15< Fire Size <= 40)"""

# 5th Division (15 < Fire Size <= 40)
Fires_t4_div5 = Smoter_KNN[(Smoter_KNN['FIRE_SIZE'] > 15) & (Smoter_KNN['FIRE_SIZE'] <= 40)]
XT4d5_train = Fires_t4_div5[Fires_t4_div5['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT4d5_test = Fires_t4_div5[Fires_t4_div5['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT4d5_train = Fires_t4_div5[Fires_t4_div5['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT4d5_test = Fires_t4_div5[Fires_t4_div5['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T4d5 = dict()       
model_T4d5_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T4d5 = model().fit(XT4d5_train,XT4d5_test)
  y_T4d5_pred = regressor_T4d5.predict(yT4d5_train)
  model_T4d5_mse = mean_squared_error(y_T4d5_pred,yT4d5_test)
  model_T4d5_mae = mean_absolute_error(y_T4d5_pred,yT4d5_test)
  model_scores_T4d5[model] = (regressor_T4d5,yT4d5_test,y_T4d5_pred)
  model_T4d5_df = model_T4d5_df.append({'Model':model,'MSE':model_T4d5_mse,'MAE':model_T4d5_mae}, ignore_index=True)
  model_T4d5_df = model_T4d5_df.sort_values(by='MSE', ascending= True)
model_T4d5_df

# Ensemble method
model_ens_t4d5_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t4d5 = VotingRegressor(i).fit(XT4d5_train,XT4d5_test)
  # Predict with our ensemble model
  ensemble_t4d5_pred = ensemble_t4d5.predict(yT4d5_train)
  model_ens_t4d5_mse = mean_squared_error(ensemble_t4d5_pred,yT4d5_test)
  model_ens_t4d5_mae = mean_absolute_error(ensemble_t4d5_pred,yT4d5_test)
  model_scores_ens_t4d5 = (ensemble_t4d5,yT4d5_test,ensemble_t4d5_pred)
  model_ens_t4d5_df = model_ens_t4d5_df.append({'Model':i,'MSE':model_ens_t4d5_mse,'MAE':model_ens_t4d5_mae}, ignore_index=True)
  model_ens_t4d5_df = model_ens_t4d5_df.sort_values(by='MSE', ascending= True)
model_ens_t4d5_df.head()

model_ens_t4d5_df['Model'][0]

"""- 6th Division (40< Fire Size <= 150)"""

# 6th Division (40 < Fire Size <= 150)
Fires_t4_div6 = Smoter_KNN[(Smoter_KNN['FIRE_SIZE'] > 40) & (Smoter_KNN['FIRE_SIZE'] <= 150)]
XT4d6_train = Fires_t4_div6[Fires_t4_div6['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT4d6_test = Fires_t4_div6[Fires_t4_div6['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT4d6_train = Fires_t4_div6[Fires_t4_div6['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT4d6_test = Fires_t4_div6[Fires_t4_div6['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T4d6 = dict()       
model_T4d6_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T4d6 = model().fit(XT4d6_train,XT4d6_test)
  y_T4d6_pred = regressor_T4d6.predict(yT4d6_train)
  model_T4d6_mse = mean_squared_error(y_T4d6_pred,yT4d6_test)
  model_T4d6_mae = mean_absolute_error(y_T4d6_pred,yT4d6_test)
  model_scores_T4d6[model] = (regressor_T4d6,yT4d6_test,y_T4d6_pred)
  model_T4d6_df = model_T4d6_df.append({'Model':model,'MSE':model_T4d6_mse,'MAE':model_T4d6_mae}, ignore_index=True)
  model_T4d6_df = model_T4d6_df.sort_values(by='MSE', ascending= True)
model_T4d6_df

# Ensemble method
model_ens_t4d6_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t4d6 = VotingRegressor(i).fit(XT4d6_train,XT4d6_test)
  # Predict with our ensemble model
  ensemble_t4d6_pred = ensemble_t4d6.predict(yT4d6_train)
  model_ens_t4d6_mse = mean_squared_error(ensemble_t4d6_pred,yT4d6_test)
  model_ens_t4d6_mae = mean_absolute_error(ensemble_t4d6_pred,yT4d6_test)
  model_scores_ens_t4d6 = (ensemble_t4d6,yT4d6_test,ensemble_t4d6_pred)
  model_ens_t4d6_df = model_ens_t4d6_df.append({'Model':i,'MSE':model_ens_t4d6_mse,'MAE':model_ens_t4d6_mae}, ignore_index=True)
  model_ens_t4d6_df = model_ens_t4d6_df.sort_values(by='MSE', ascending= True)
model_ens_t4d6_df.head()

model_ens_t4d6_df['Model'][0]

"""- 7th Division (150< Fire Size <= 1000)"""

# 7th Division (150 < Fire Size <= 600)
Fires_t4_div7 = Smoter_KNN[(Smoter_KNN['FIRE_SIZE'] > 150) & (Smoter_KNN['FIRE_SIZE'] <= 600)]
XT4d7_train = Fires_t4_div7[Fires_t4_div7['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT4d7_test = Fires_t4_div7[Fires_t4_div7['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT4d7_train = Fires_t4_div7[Fires_t4_div7['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT4d7_test = Fires_t4_div7[Fires_t4_div7['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T4d7 = dict()       
model_T4d7_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T4d7 = model().fit(XT4d7_train,XT4d7_test)
  y_T4d7_pred = regressor_T4d7.predict(yT4d7_train)
  model_T4d7_mse = mean_squared_error(y_T4d7_pred,yT4d7_test)
  model_T4d7_mae = mean_absolute_error(y_T4d7_pred,yT4d7_test)
  model_scores_T4d7[model] = (regressor_T4d7,yT4d7_test,y_T4d7_pred)
  model_T4d7_df = model_T4d7_df.append({'Model':model,'MSE':model_T4d7_mse,'MAE':model_T4d7_mae}, ignore_index=True)
  model_T4d7_df = model_T4d7_df.sort_values(by='MSE', ascending= True)
model_T4d7_df

# Ensemble method
model_ens_t4d7_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t4d7 = VotingRegressor(i).fit(XT4d7_train,XT4d7_test)
  # Predict with our ensemble model
  ensemble_t4d7_pred = ensemble_t4d7.predict(yT4d7_train)
  model_ens_t4d7_mse = mean_squared_error(ensemble_t4d7_pred,yT4d7_test)
  model_ens_t4d7_mae = mean_absolute_error(ensemble_t4d7_pred,yT4d7_test)
  model_scores_ens_t4d7 = (ensemble_t4d7,yT4d7_test,ensemble_t4d7_pred)
  model_ens_t4d7_df = model_ens_t4d7_df.append({'Model':i,'MSE':model_ens_t4d7_mse,'MAE':model_ens_t4d7_mae}, ignore_index=True)
  model_ens_t4d7_df = model_ens_t4d7_df.sort_values(by='MSE', ascending= True)
model_ens_t4d7_df.head()

model_ens_t4d7_df['Model'][0]

"""- 8th Division (600< Fire Size <= 1000)"""

# 8th Division (600 < Fire Size <= 1000)
Fires_t4_div8 = Smoter_KNN[(Smoter_KNN['FIRE_SIZE'] > 600) & (Smoter_KNN['FIRE_SIZE'] <= 1000)]
XT4d8_train = Fires_t4_div8[Fires_t4_div8['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT4d8_test = Fires_t4_div8[Fires_t4_div8['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT4d8_train = Fires_t4_div8[Fires_t4_div8['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT4d8_test = Fires_t4_div8[Fires_t4_div8['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T4d8 = dict()       
model_T4d8_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T4d8 = model().fit(XT4d8_train,XT4d8_test)
  y_T4d8_pred = regressor_T4d8.predict(yT4d8_train)
  model_T4d8_mse = mean_squared_error(y_T4d8_pred,yT4d8_test)
  model_T4d8_mae = mean_absolute_error(y_T4d8_pred,yT4d8_test)
  model_scores_T4d8[model] = (regressor_T4d8,yT4d8_test,y_T4d8_pred)
  model_T4d8_df = model_T4d8_df.append({'Model':model,'MSE':model_T4d8_mse,'MAE':model_T4d8_mae}, ignore_index=True)
  model_T4d8_df = model_T4d8_df.sort_values(by='MSE', ascending= True)
model_T4d8_df

# Ensemble method
model_ens_t4d8_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t4d8 = VotingRegressor(i).fit(XT4d8_train,XT4d8_test)
  # Predict with our ensemble model
  ensemble_t4d8_pred = ensemble_t4d8.predict(yT4d8_train)
  model_ens_t4d8_mse = mean_squared_error(ensemble_t4d8_pred,yT4d8_test)
  model_ens_t4d8_mae = mean_absolute_error(ensemble_t4d8_pred,yT4d8_test)
  model_scores_ens_t4d8 = (ensemble_t4d8,yT4d8_test,ensemble_t4d8_pred)
  model_ens_t4d8_df = model_ens_t4d8_df.append({'Model':i,'MSE':model_ens_t4d8_mse,'MAE':model_ens_t4d8_mae}, ignore_index=True)
  model_ens_t4d8_df = model_ens_t4d8_df.sort_values(by='MSE', ascending= True)
model_ens_t4d8_df.head()

model_ens_t4d8_df['Model'][0]

"""- 9th Division (1000< Fire Size <= 10000)"""

# 9th Division (1000 < Fire Size <= 10000)
Fires_t4_div9 = Smoter_KNN[(Smoter_KNN['FIRE_SIZE'] > 1000) & (Smoter_KNN['FIRE_SIZE'] <= 10000)]
XT4d9_train = Fires_t4_div9[Fires_t4_div9['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT4d9_test = Fires_t4_div9[Fires_t4_div9['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT4d9_train = Fires_t4_div9[Fires_t4_div9['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT4d9_test = Fires_t4_div9[Fires_t4_div9['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T4d9 = dict()       
model_T4d9_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T4d9 = model().fit(XT4d9_train,XT4d9_test)
  y_T4d9_pred = regressor_T4d9.predict(yT4d9_train)
  model_T4d9_mse = mean_squared_error(y_T4d9_pred,yT4d9_test)
  model_T4d9_mae = mean_absolute_error(y_T4d9_pred,yT4d9_test)
  model_scores_T4d9[model] = (regressor_T4d9,yT4d9_test,y_T4d9_pred)
  model_T4d9_df = model_T4d9_df.append({'Model':model,'MSE':model_T4d9_mse,'MAE':model_T4d9_mae}, ignore_index=True)
  model_T4d9_df = model_T4d9_df.sort_values(by='MSE', ascending= True)
model_T4d9_df

# Ensemble method
model_ens_t4d9_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t4d9 = VotingRegressor(i).fit(XT4d9_train,XT4d9_test)
  # Predict with our ensemble model
  ensemble_t4d9_pred = ensemble_t4d9.predict(yT4d9_train)
  model_ens_t4d9_mse = mean_squared_error(ensemble_t4d9_pred,yT4d9_test)
  model_ens_t4d9_mae = mean_absolute_error(ensemble_t4d9_pred,yT4d9_test)
  model_scores_ens_t4d9 = (ensemble_t4d9,yT4d9_test,ensemble_t4d9_pred)
  model_ens_t4d9_df = model_ens_t4d9_df.append({'Model':i,'MSE':model_ens_t4d9_mse,'MAE':model_ens_t4d9_mae}, ignore_index=True)
  model_ens_t4d9_df = model_ens_t4d9_df.sort_values(by='MSE', ascending= True)
model_ens_t4d9_df.head()

model_ens_t4d9_df['Model'][0]

"""- 10th Division (Fire Size > 10000)

  - KNeighborsRegressor outperformed!
"""

# 10th Division (Fire Size > 10000)
Fires_t4_div10 = Smoter_KNN[Smoter_KNN['FIRE_SIZE'] > 10000]
XT4d10_train = Fires_t4_div10[Fires_t4_div10['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT4d10_test = Fires_t4_div10[Fires_t4_div10['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT4d10_train = Fires_t4_div10[Fires_t4_div10['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT4d10_test = Fires_t4_div10[Fires_t4_div10['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T4d10 = dict()       
model_T4d10_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T4d10 = model().fit(XT4d10_train,XT4d10_test)
  y_T4d10_pred = regressor_T4d10.predict(yT4d10_train)
  model_T4d10_mse = mean_squared_error(y_T4d10_pred,yT4d10_test)
  model_T4d10_mae = mean_absolute_error(y_T4d10_pred,yT4d10_test)
  model_scores_T4d10[model] = (regressor_T4d10,yT4d10_test,y_T4d10_pred)
  model_T4d10_df = model_T4d10_df.append({'Model':model,'MSE':model_T4d10_mse,'MAE':model_T4d10_mae}, ignore_index=True)
  model_T4d10_df = model_T4d10_df.sort_values(by='MSE', ascending= True)
model_T4d10_df

# Ensemble method
model_ens_t4d10_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t4d10 = VotingRegressor(i).fit(XT4d10_train,XT4d10_test)
  # Predict with our ensemble model
  ensemble_t4d10_pred = ensemble_t4d10.predict(yT4d10_train)
  model_ens_t4d10_mse = mean_squared_error(ensemble_t4d10_pred,yT4d10_test)
  model_ens_t4d10_mae = mean_absolute_error(ensemble_t4d10_pred,yT4d10_test)
  model_scores_ens_t4d10 = (ensemble_t4d10,yT4d10_test,ensemble_t4d10_pred)
  model_ens_t4d10_df = model_ens_t4d10_df.append({'Model':i,'MSE':model_ens_t4d10_mse,'MAE':model_ens_t4d10_mae}, ignore_index=True)
  model_ens_t4d10_df = model_ens_t4d10_df.sort_values(by='MSE', ascending= True)
model_ens_t4d10_df.head()

model_ens_t4d10_df['Model'][0]

"""# Trial 5: SMOTER (Divide dataset by FIRE_SIZE_CLASS)

- 1st Division (Fire Size Class A)
"""

# 1st Division (Fire Size Class A)
Fires_t5_div1 = Smoter_KNN[Smoter_KNN['FIRE_SIZE_CLASS'] == 'A']
XT5d1_train = Fires_t5_div1[Fires_t5_div1['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT5d1_test = Fires_t5_div1[Fires_t5_div1['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT5d1_train = Fires_t5_div1[Fires_t5_div1['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT5d1_test = Fires_t5_div1[Fires_t5_div1['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T5d1 = dict()       
model_T5d1_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T5d1 = model().fit(XT5d1_train,XT5d1_test)
  y_T5d1_pred = regressor_T5d1.predict(yT5d1_train)
  model_T5d1_mse = mean_squared_error(y_T5d1_pred,yT5d1_test)
  model_T5d1_mae = mean_absolute_error(y_T5d1_pred,yT5d1_test)
  model_scores_T5d1[model] = (regressor_T5d1,yT5d1_test,y_T5d1_pred)
  model_T5d1_df = model_T5d1_df.append({'Model':model,'MSE':model_T5d1_mse,'MAE':model_T5d1_mae}, ignore_index=True)
  model_T5d1_df = model_T5d1_df.sort_values(by='MSE', ascending= True)
model_T5d1_df

# Ensemble method
model_ens_t5d1_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t5d1 = VotingRegressor(i).fit(XT5d1_train,XT5d1_test)
  # Predict with our ensemble model
  ensemble_t5d1_pred = ensemble_t5d1.predict(yT5d1_train)
  model_ens_t5d1_mse = mean_squared_error(ensemble_t5d1_pred,yT5d1_test)
  model_ens_t5d1_mae = mean_absolute_error(ensemble_t5d1_pred,yT5d1_test)
  model_scores_ens_t5d1 = (ensemble_t5d1,yT5d1_test,ensemble_t5d1_pred)
  model_ens_t5d1_df = model_ens_t5d1_df.append({'Model':i,'MSE':model_ens_t5d1_mse,'MAE':model_ens_t5d1_mae}, ignore_index=True)
  model_ens_t5d1_df = model_ens_t5d1_df.sort_values(by='MSE', ascending= True)
model_ens_t5d1_df.head()

model_ens_t5d1_df['Model'][0]

"""- 2nd Division (Fire Size Class B)"""

# 2nd Division (Fire Size Class B)
Fires_t5_div2 = Smoter_KNN[Smoter_KNN['FIRE_SIZE_CLASS'] == 'B']
XT5d2_train = Fires_t5_div2[Fires_t5_div2['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT5d2_test = Fires_t5_div2[Fires_t5_div2['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT5d2_train = Fires_t5_div2[Fires_t5_div2['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT5d2_test = Fires_t5_div2[Fires_t5_div2['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T5d2 = dict()       
model_T5d2_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T5d2 = model().fit(XT5d2_train,XT5d2_test)
  y_T5d2_pred = regressor_T5d2.predict(yT5d2_train)
  model_T5d2_mse = mean_squared_error(y_T5d2_pred,yT5d2_test)
  model_T5d2_mae = mean_absolute_error(y_T5d2_pred,yT5d2_test)
  model_scores_T5d2[model] = (regressor_T5d2,yT5d2_test,y_T5d2_pred)
  model_T5d2_df = model_T5d2_df.append({'Model':model,'MSE':model_T5d2_mse,'MAE':model_T5d2_mae}, ignore_index=True)
  model_T5d2_df = model_T5d2_df.sort_values(by='MSE', ascending= True)
model_T5d2_df

# Ensemble method
model_ens_t5d2_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t5d2 = VotingRegressor(i).fit(XT5d2_train,XT5d2_test)
  # Predict with our ensemble model
  ensemble_t5d2_pred = ensemble_t5d2.predict(yT5d2_train)
  model_ens_t5d2_mse = mean_squared_error(ensemble_t5d2_pred,yT5d2_test)
  model_ens_t5d2_mae = mean_absolute_error(ensemble_t5d2_pred,yT5d2_test)
  model_scores_ens_t5d2 = (ensemble_t5d2,yT5d2_test,ensemble_t5d2_pred)
  model_ens_t5d2_df = model_ens_t5d2_df.append({'Model':i,'MSE':model_ens_t5d2_mse,'MAE':model_ens_t5d2_mae}, ignore_index=True)
  model_ens_t5d2_df = model_ens_t5d2_df.sort_values(by='MSE', ascending= True)
model_ens_t5d2_df.head()

model_ens_t5d2_df['Model'][0]

"""- 3rd Division (Fire Size Class C)"""

# 3rd Division (Fire Size Class C)
Fires_t5_div3 = Smoter_KNN[Smoter_KNN['FIRE_SIZE_CLASS'] == 'C']
XT5d3_train = Fires_t5_div3[Fires_t5_div3['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT5d3_test = Fires_t5_div3[Fires_t5_div3['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT5d3_train = Fires_t5_div3[Fires_t5_div3['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT5d3_test = Fires_t5_div3[Fires_t5_div3['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T5d3 = dict()       
model_T5d3_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T5d3 = model().fit(XT5d3_train,XT5d3_test)
  y_T5d3_pred = regressor_T5d3.predict(yT5d3_train)
  model_T5d3_mse = mean_squared_error(y_T5d3_pred,yT5d3_test)
  model_T5d3_mae = mean_absolute_error(y_T5d3_pred,yT5d3_test)
  model_scores_T5d3[model] = (regressor_T5d3,yT5d3_test,y_T5d3_pred)
  model_T5d3_df = model_T5d3_df.append({'Model':model,'MSE':model_T5d3_mse,'MAE':model_T5d3_mae}, ignore_index=True)
  model_T5d3_df = model_T5d3_df.sort_values(by='MSE', ascending= True)
model_T5d3_df

# Ensemble method
model_ens_t5d3_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t5d3 = VotingRegressor(i).fit(XT5d3_train,XT5d3_test)
  # Predict with our ensemble model
  ensemble_t5d3_pred = ensemble_t5d3.predict(yT5d3_train)
  model_ens_t5d3_mse = mean_squared_error(ensemble_t5d3_pred,yT5d3_test)
  model_ens_t5d3_mae = mean_absolute_error(ensemble_t5d3_pred,yT5d3_test)
  model_scores_ens_t5d3 = (ensemble_t5d3,yT5d3_test,ensemble_t5d3_pred)
  model_ens_t5d3_df = model_ens_t5d3_df.append({'Model':i,'MSE':model_ens_t5d3_mse,'MAE':model_ens_t5d3_mae}, ignore_index=True)
  model_ens_t5d3_df = model_ens_t5d3_df.sort_values(by='MSE', ascending= True)
model_ens_t5d3_df.head()

model_ens_t5d3_df['Model'][0]

"""- 4th Division (Fire Size Class D)"""

# 4th Division (Fire Size Class D)
Fires_t5_div4 = Smoter_KNN[Smoter_KNN['FIRE_SIZE_CLASS'] == 'D']
XT5d4_train = Fires_t5_div4[Fires_t5_div4['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT5d4_test = Fires_t5_div4[Fires_t5_div4['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT5d4_train = Fires_t5_div4[Fires_t5_div4['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT5d4_test = Fires_t5_div4[Fires_t5_div4['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T5d4 = dict()       
model_T5d4_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T5d4 = model().fit(XT5d4_train,XT5d4_test)
  y_T5d4_pred = regressor_T5d4.predict(yT5d4_train)
  model_T5d4_mse = mean_squared_error(y_T5d4_pred,yT5d4_test)
  model_T5d4_mae = mean_absolute_error(y_T5d4_pred,yT5d4_test)
  model_scores_T5d4[model] = (regressor_T5d4,yT5d4_test,y_T5d4_pred)
  model_T5d4_df = model_T5d4_df.append({'Model':model,'MSE':model_T5d4_mse,'MAE':model_T5d4_mae}, ignore_index=True)
  model_T5d4_df = model_T5d4_df.sort_values(by='MSE', ascending= True)
model_T5d4_df

# Ensemble method
model_ens_t5d4_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t5d4 = VotingRegressor(i).fit(XT5d4_train,XT5d4_test)
  # Predict with our ensemble model
  ensemble_t5d4_pred = ensemble_t5d4.predict(yT5d4_train)
  model_ens_t5d4_mse = mean_squared_error(ensemble_t5d4_pred,yT5d4_test)
  model_ens_t5d4_mae = mean_absolute_error(ensemble_t5d4_pred,yT5d4_test)
  model_scores_ens_t5d4 = (ensemble_t5d4,yT5d4_test,ensemble_t5d4_pred)
  model_ens_t5d4_df = model_ens_t5d4_df.append({'Model':i,'MSE':model_ens_t5d4_mse,'MAE':model_ens_t5d4_mae}, ignore_index=True)
  model_ens_t5d4_df = model_ens_t5d4_df.sort_values(by='MSE', ascending= True)
model_ens_t5d4_df.head()

model_ens_t5d4_df['Model'][0]

"""- 5th Division (Fire Size Class E)"""

# 5th Division (Fire Size Class E)
Fires_t5_div5 = Smoter_KNN[Smoter_KNN['FIRE_SIZE_CLASS'] == 'E']
XT5d5_train = Fires_t5_div5[Fires_t5_div5['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT5d5_test = Fires_t5_div5[Fires_t5_div5['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT5d5_train = Fires_t5_div5[Fires_t5_div5['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT5d5_test = Fires_t5_div5[Fires_t5_div5['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T5d5 = dict()       
model_T5d5_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T5d5 = model().fit(XT5d5_train,XT5d5_test)
  y_T5d5_pred = regressor_T5d5.predict(yT5d5_train)
  model_T5d5_mse = mean_squared_error(y_T5d5_pred,yT5d5_test)
  model_T5d5_mae = mean_absolute_error(y_T5d5_pred,yT5d5_test)
  model_scores_T5d5[model] = (regressor_T5d5,yT5d5_test,y_T5d5_pred)
  model_T5d5_df = model_T5d5_df.append({'Model':model,'MSE':model_T5d5_mse,'MAE':model_T5d5_mae}, ignore_index=True)
  model_T5d5_df = model_T5d5_df.sort_values(by='MSE', ascending= True)
model_T5d5_df

# Ensemble method
model_ens_t5d5_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t5d5 = VotingRegressor(i).fit(XT5d5_train,XT5d5_test)
  # Predict with our ensemble model
  ensemble_t5d5_pred = ensemble_t5d5.predict(yT5d5_train)
  model_ens_t5d5_mse = mean_squared_error(ensemble_t5d5_pred,yT5d5_test)
  model_ens_t5d5_mae = mean_absolute_error(ensemble_t5d5_pred,yT5d5_test)
  model_scores_ens_t5d5 = (ensemble_t5d5,yT5d5_test,ensemble_t5d5_pred)
  model_ens_t5d5_df = model_ens_t5d5_df.append({'Model':i,'MSE':model_ens_t5d5_mse,'MAE':model_ens_t5d5_mae}, ignore_index=True)
  model_ens_t5d5_df = model_ens_t5d5_df.sort_values(by='MSE', ascending= True)
model_ens_t5d5_df.head()

model_ens_t5d5_df['Model'][0]

"""- 6th Division (Fire Size Class F)"""

# 6th Division (Fire Size Class F)
Fires_t5_div6 = Smoter_KNN[Smoter_KNN['FIRE_SIZE_CLASS'] == 'F']
XT5d6_train = Fires_t5_div6[Fires_t5_div6['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT5d6_test = Fires_t5_div6[Fires_t5_div6['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT5d6_train = Fires_t5_div6[Fires_t5_div6['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT5d6_test = Fires_t5_div6[Fires_t5_div6['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T5d6 = dict()       
model_T5d6_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T5d6 = model().fit(XT5d6_train,XT5d6_test)
  y_T5d6_pred = regressor_T5d6.predict(yT5d6_train)
  model_T5d6_mse = mean_squared_error(y_T5d6_pred,yT5d6_test)
  model_T5d6_mae = mean_absolute_error(y_T5d6_pred,yT5d6_test)
  model_scores_T5d6[model] = (regressor_T5d6,yT5d6_test,y_T5d6_pred)
  model_T5d6_df = model_T5d6_df.append({'Model':model,'MSE':model_T5d6_mse,'MAE':model_T5d6_mae}, ignore_index=True)
  model_T5d6_df = model_T5d6_df.sort_values(by='MSE', ascending= True)
model_T5d6_df

# Ensemble method
model_ens_t5d6_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t5d6 = VotingRegressor(i).fit(XT5d6_train,XT5d6_test)
  # Predict with our ensemble model
  ensemble_t5d6_pred = ensemble_t5d6.predict(yT5d6_train)
  model_ens_t5d6_mse = mean_squared_error(ensemble_t5d6_pred,yT5d6_test)
  model_ens_t5d6_mae = mean_absolute_error(ensemble_t5d6_pred,yT5d6_test)
  model_scores_ens_t5d6 = (ensemble_t5d6,yT5d6_test,ensemble_t5d6_pred)
  model_ens_t5d6_df = model_ens_t5d6_df.append({'Model':i,'MSE':model_ens_t5d6_mse,'MAE':model_ens_t5d6_mae}, ignore_index=True)
  model_ens_t5d6_df = model_ens_t5d6_df.sort_values(by='MSE', ascending= True)
model_ens_t5d6_df.head()

model_ens_t5d6_df['Model'][0]

"""- 7th Division (Fire Size Class G)"""

# 7th Division (Fire Size Class G)
Fires_t5_div7 = Smoter_KNN[Smoter_KNN['FIRE_SIZE_CLASS'] == 'G']
XT5d7_train = Fires_t5_div7[Fires_t5_div7['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
XT5d7_test = Fires_t5_div7[Fires_t5_div7['FIRE_YEAR'] < 2018]['FIRE_SIZE']
yT5d7_train = Fires_t5_div7[Fires_t5_div7['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
yT5d7_test = Fires_t5_div7[Fires_t5_div7['FIRE_YEAR'] == 2018]['FIRE_SIZE']

# Modeling
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_T5d7 = dict()       
model_T5d7_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_T5d7 = model().fit(XT5d7_train,XT5d7_test)
  y_T5d7_pred = regressor_T5d7.predict(yT5d7_train)
  model_T5d7_mse = mean_squared_error(y_T5d7_pred,yT5d7_test)
  model_T5d7_mae = mean_absolute_error(y_T5d7_pred,yT5d7_test)
  model_scores_T5d7[model] = (regressor_T5d7,yT5d7_test,y_T5d7_pred)
  model_T5d7_df = model_T5d7_df.append({'Model':model,'MSE':model_T5d7_mse,'MAE':model_T5d7_mae}, ignore_index=True)
  model_T5d7_df = model_T5d7_df.sort_values(by='MSE', ascending= True)
model_T5d7_df

# Ensemble method
model_ens_t5d7_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
# Build and train the model
for i in ens_list:
  ensemble_t5d7 = VotingRegressor(i).fit(XT5d7_train,XT5d7_test)
  # Predict with our ensemble model
  ensemble_t5d7_pred = ensemble_t5d7.predict(yT5d7_train)
  model_ens_t5d7_mse = mean_squared_error(ensemble_t5d7_pred,yT5d7_test)
  model_ens_t5d7_mae = mean_absolute_error(ensemble_t5d7_pred,yT5d7_test)
  model_scores_ens_t5d7 = (ensemble_t5d7,yT5d7_test,ensemble_t5d7_pred)
  model_ens_t5d7_df = model_ens_t5d7_df.append({'Model':i,'MSE':model_ens_t5d7_mse,'MAE':model_ens_t5d7_mae}, ignore_index=True)
  model_ens_t5d7_df = model_ens_t5d7_df.sort_values(by='MSE', ascending= True)
model_ens_t5d7_df.head()

model_ens_t5d7_df['Model'][0]

"""# Trial 7: SMOTE (Oversampling) : Regression


"""

Fires_New = Fires_KNN.copy()
Fires_New = Fires_New.drop(columns=['FIRE_SIZE_CLASS'], inplace=False)

Fires_New.loc[Fires_New.FIRE_SIZE < 1, 'FIRE_SIZE_CLASS'] = 'A'
Fires_New.loc[(Fires_New.FIRE_SIZE >= 1) & (Fires_New.FIRE_SIZE <= 2), 'FIRE_SIZE_CLASS'] = 'B'
Fires_New.loc[(Fires_New.FIRE_SIZE > 2) & (Fires_New.FIRE_SIZE <= 5), 'FIRE_SIZE_CLASS'] = 'C'
Fires_New.loc[(Fires_New.FIRE_SIZE > 5) & (Fires_New.FIRE_SIZE <= 15), 'FIRE_SIZE_CLASS'] = 'D'
Fires_New.loc[(Fires_New.FIRE_SIZE > 15) & (Fires_New.FIRE_SIZE <= 40), 'FIRE_SIZE_CLASS'] = 'E'
Fires_New.loc[(Fires_New.FIRE_SIZE > 40) & (Fires_New.FIRE_SIZE <= 150), 'FIRE_SIZE_CLASS'] = 'F'
Fires_New.loc[(Fires_New.FIRE_SIZE > 150) & (Fires_New.FIRE_SIZE <= 600), 'FIRE_SIZE_CLASS'] = 'G'
Fires_New.loc[(Fires_New.FIRE_SIZE > 600) & (Fires_New.FIRE_SIZE <= 1000), 'FIRE_SIZE_CLASS'] = 'H'
Fires_New.loc[(Fires_New.FIRE_SIZE > 1000) & (Fires_New.FIRE_SIZE <= 10000), 'FIRE_SIZE_CLASS'] = 'I'
Fires_New.loc[Fires_New.FIRE_SIZE > 10000, 'FIRE_SIZE_CLASS'] = 'J'

Fires_New

from imblearn.over_sampling import SMOTE 
stg = {'A':13500, 'B':13500, 'C':13500, 'D':13500, 'E':13500, 'F':13500, 'G':13500, 'H':13500, 'I':13500, 'J':13500}
sm = SMOTE(sampling_strategy=stg, random_state=42)
train_SMOTE = Fires_New[['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD','FIRE_SIZE','FIRE_YEAR']]
target_SMOTE = Fires_New['FIRE_SIZE_CLASS']
X_SMOTE, y_SMOTE = sm.fit_resample(train_SMOTE, target_SMOTE)

y_SMOTE.hist()

X_SMOTE

y_SMOTE

Fires_SMOTE = pd.concat([X_SMOTE, y_SMOTE], axis=1)
Fires_SMOTE

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_SMOTE_train = Fires_SMOTE[Fires_SMOTE['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
X_SMOTE_test = Fires_SMOTE[Fires_SMOTE['FIRE_YEAR'] < 2018]['FIRE_SIZE']
y_SMOTE_train = Fires_SMOTE[Fires_SMOTE['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
y_SMOTE_test = Fires_SMOTE[Fires_SMOTE['FIRE_YEAR'] == 2018]['FIRE_SIZE']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [LinearRegression, RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor,
               KNeighborsRegressor]
model_scores_SMOTE = dict()    
model_SMOTE_df = pd.DataFrame(columns=['Model', 'MSE', 'MAE'])
for model in model_list:
  regressor_SMOTE = model().fit(X_SMOTE_train,X_SMOTE_test)
  y_SMOTE_pred = regressor_SMOTE.predict(y_SMOTE_train)
  model_SMOTE_mse = mean_squared_error(y_SMOTE_pred,y_SMOTE_test)
  model_SMOTE_mae = mean_absolute_error(y_SMOTE_pred,y_SMOTE_test)
  model_scores_SMOTE[model] = (regressor_SMOTE,y_SMOTE_test,y_SMOTE_pred)
  model_SMOTE_df = model_SMOTE_df.append({'Model':model,'MSE':model_SMOTE_mse,'MAE':model_SMOTE_mae}, ignore_index=True)
  model_SMOTE_df = model_SMOTE_df.sort_values(by='MSE', ascending= True)
model_SMOTE_df

"""# Trial 7: SMOTE (Oversampling) : Classification

- Original Dataset
"""

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
X_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] < 2018]['FIRE_SIZE_CLASS']
y_KNN_train = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
y_KNN_test = Fires_KNN[Fires_KNN['FIRE_YEAR'] == 2018]['FIRE_SIZE_CLASS']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import RidgeClassifier
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

model_list = [RidgeClassifier, RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier,
               KNeighborsClassifier]
model_scores_KNN = dict()    
model_KNN_df = pd.DataFrame(columns=['Model', 'Accuracy', 'F1', 'Precision', 'Recall'])
for model in model_list:
  regressor_KNN = model().fit(X_KNN_train,X_KNN_test)
  y_KNN_pred = regressor_KNN.predict(y_KNN_train)
  model_KNN_accuracy = accuracy_score(y_KNN_pred,y_KNN_test)
  model_KNN_f1 = f1_score(y_KNN_pred,y_KNN_test, average='micro')
  model_KNN_precision = precision_score(y_KNN_pred,y_KNN_test, average='micro')
  model_KNN_recall = recall_score(y_KNN_pred,y_KNN_test, average='micro')
  model_scores_KNN[model] = (regressor_KNN,y_KNN_test,y_KNN_pred)
  model_KNN_df = model_KNN_df.append({'Model':model,'Accuracy':model_KNN_accuracy,'F1':model_KNN_f1, 'Precision':model_KNN_precision, 'Recall':model_KNN_recall}, ignore_index=True)
  model_KNN_df = model_KNN_df.sort_values(by='F1', ascending= False)
model_KNN_df

from imblearn.over_sampling import SMOTE 
sm = SMOTE(sampling_strategy='not majority', random_state=42)
train_SMOTE = Fires_KNN[['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD','FIRE_SIZE','FIRE_YEAR']]
target_SMOTE = Fires_KNN['FIRE_SIZE_CLASS']
X_SMOTE, y_SMOTE = sm.fit_resample(train_SMOTE, target_SMOTE)
Fires_SMOTE = pd.concat([X_SMOTE, y_SMOTE], axis=1)
Fires_SMOTE

fires_class = Fires_SMOTE['FIRE_SIZE_CLASS']
fires_class.value_counts().sort_index().plot(kind='bar')

#### split data into training and testing
# Training : 1992-2017 data
# Testing : 2018 data
X_SMOTE_train = Fires_SMOTE[Fires_SMOTE['FIRE_YEAR'] < 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
X_SMOTE_test = Fires_SMOTE[Fires_SMOTE['FIRE_YEAR'] < 2018]['FIRE_SIZE_CLASS']
y_SMOTE_train = Fires_SMOTE[Fires_SMOTE['FIRE_YEAR'] == 2018][['DISCOVERY_DOY','DISCOVERY_TIME','LATITUDE','LONGITUDE','FIPS_NAME','DISCOVERY_MONTH','NWCG_CAUSE_CLASSIFICATION_ORD','STATE_ORD']]
y_SMOTE_test = Fires_SMOTE[Fires_SMOTE['FIRE_YEAR'] == 2018]['FIRE_SIZE_CLASS']

#### list of models to train
# xgboost, linear regression (with and without regularization), random forest, naive bayes, nearest neighbors
# k-means, svm
model_list = [RidgeClassifier, RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier,
               KNeighborsClassifier]
model_scores_SMOTE = dict()    
model_SMOTE_df = pd.DataFrame(columns=['Model', 'Accuracy', 'F1', 'Precision', 'Recall'])
for model in model_list:
  regressor_SMOTE = model().fit(X_SMOTE_train,X_SMOTE_test)
  y_SMOTE_pred = regressor_SMOTE.predict(y_SMOTE_train)
  model_SMOTE_accuracy = accuracy_score(y_SMOTE_pred,y_SMOTE_test)
  model_SMOTE_f1 = f1_score(y_SMOTE_pred,y_SMOTE_test, average='micro')
  model_SMOTE_precision = precision_score(y_SMOTE_pred,y_SMOTE_test, average='micro')
  model_SMOTE_recall = recall_score(y_SMOTE_pred,y_SMOTE_test, average='micro')
  model_scores_SMOTE[model] = (regressor_SMOTE,y_SMOTE_test,y_SMOTE_pred)
  model_SMOTE_df = model_SMOTE_df.append({'Model':model,'Accuracy':model_SMOTE_accuracy,'F1':model_SMOTE_f1, 'Precision': model_SMOTE_precision, 'Recall': model_SMOTE_recall}, ignore_index=True)
  model_SMOTE_df = model_SMOTE_df.sort_values(by='F1', ascending= False)
model_SMOTE_df